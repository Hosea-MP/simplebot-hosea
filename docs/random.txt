*GitHub Repository "dAtiuyy/SimpleBot-Scripts"*

'''--- Battlescape/SimpleBot-daAmethyst/daMain.java ---
package daAmethyst;

import java.awt.*;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "unix && alex", category = Category.MINING, description = "Mines amethyst and banks it all, u have to be at the amethyst rocks at home and both the rocks and deposit box must be visible", discord = "empty",
        name = "daAmethyst miner", servers = { "Battlescape" }, version = "1.0")
public class daMain extends Script {

    public String status;
    public long startTime;
    public int startExperience, minerals;
    private static final int DEPOSIT_BOX = 25937;
    private static final int AMETHYST_ID = 11388;

    @Override
    public void onExecute() {
        System.out.println("Started daAmethyst!!!");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.MINING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter(DEPOSIT_BOX).nearest().next();
            if (bank == null) {
                return;
            }
            if (ctx.bank.depositBoxOpen() == false) {
                status("Banking 1");
                bank.click("Deposit");
                ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                return;
            }
        } //keep this shit bruh, always first, checks if inv full lol

        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            status("Close bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> ctx.bank.depositBoxOpen() == false, 2500);
        }

        SimpleObject ore = ctx.objects.populate().filter(AMETHYST_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (ore != null) {
                status("Smashing");
                ore.click("Mine");
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("be interested in these unidentified minerals")) {
                minerals++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;
        Font font = new Font("Arial", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.decode("#1C6497"));
        g.drawString("daAmethyst    v. " + "1.0", 385, 286);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 385, 298);
        g.drawString("Status: " + status, 385, 308);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.MINING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 385, 320);
        g.drawString("Minerals: " + ctx.paint.formatValue(minerals) + " (" + ctx.paint.valuePerHour(minerals, startTime) + " /Hour)", 385, 332);

    }
}

'''
'''--- Battlescape/SimpleBot-daPrayerPots/daMain.java ---
package daPrayerBots;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

@ScriptManifest(
        author = "alex",
        category = Category.HERBLORE,
        description = "<html>"
                + "<p>Dumb Prayer Pot maker for Battlescape</p>"
                + "<p><strong>makes roones</strong></p>"
                + "<ul>"
                + "<li><strong>Start on a tile near home bank or ::dz (for presets)</strong>.</li>"
                + "<li><strong>Have your first preset have 14 ranarr pots and 14 snape grass (unnoted both)</strong>.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daPrayerPots",
        servers = {"Battlescape"},
        version = "3.0"
)

public class daMain extends Script {
    public String status;
    public long startTime;
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daPrayerPots");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        status("making pots");
        SimpleItem ing1 = ctx.inventory.populate().filter(99).next(); //ID for ranarr pots or snape grass
        SimpleItem ing2 = ctx.inventory.populate().filter(231).next(); //ID for ranarr pots or snape grass

        if (ing1 == null || ing2 == null) {
            clickPreset();
        }

        if (ing1 != null && ing2 != null && !ctx.players.getLocal().isAnimating()) {
            ing1.click(0);
            ing2.click(0);
            if (ctx.dialogue.dialogueOpen()) {
                int SPACE_BUTTON = KeyEvent.VK_SPACE;
                ctx.keyboard.clickKey(SPACE_BUTTON);
            }
            ctx.sleepCondition(() -> ctx.players.getLocal().isAnimating(),500);
        }

    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    @Override
    public void onTerminate() {
    }

    public void status(final String status) {
        this.status = status;
    }

    private void clickPreset() {
        status("preset moment");
        SimpleWidget preset = ctx.widgets.getWidget(702, 38);
        SimpleWidget questTab = ctx.widgets.getWidget(548, 50);
        SimpleWidget loadOuts = ctx.widgets.getWidget(702, 5);
        if (questTab != null && !questTab.isHidden()) {
            questTab.click(0);
            if (loadOuts != null && !loadOuts.isHidden()) {
                loadOuts.click(0);
                if (preset != null && !preset.isHidden()) {
                    preset.click(0);
                }
            }
        }
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daPrayerPots  v. " + "3.0", 380, 274);
        }
    }
}
'''
'''--- Battlescape/SimpleBot-daRedwood/daMain.java ---
package daRedwood;

import java.awt.*;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.queries.SimpleEntityQuery;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "unix && alex", category = Category.WOODCUTTING, description = "Cuts Redwood, collects clues, bird eggs and banks it all, both the redwood and the deposit box must be visible for this to work", discord = "empty",
        name = "daRedwood Chopper", servers = { "Battlescape" }, version = "1.0")
public class daMain extends Script {

    private final WorldPoint BANK_TILE = new WorldPoint(3124, 3458, 0); // The bank tile we want to step to for banking

    public String status;

    public long startTime;
    public int startExperience, picked_items;

    private static final int[] BIRD_NEST = {5070, 5072, 5071};
    private static final int DEPOSIT_BOX = 25937;
    private static final int REDWOOD_ID = 29668;

    @Override
    public void onExecute() {
        System.out.println("Started daRedwood!");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter(DEPOSIT_BOX).nearest().next();
            if (bank == null) {
                return;
            }
            if (ctx.bank.depositBoxOpen() == false) {
                status("Banking 1");
                bank.click("Deposit");
                ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                return;
            }
        }

        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> ctx.bank.depositBoxOpen() == false, 2500);
        }

        if (ctx.groundItems.populate().filter(BIRD_NEST).isEmpty() == false) {
            status("Looting items");
            ctx.groundItems.nearest().next().click("Take");
            ctx.sleep(2000);
            return;
        } // picks up whatever u tell it to lol

        SimpleObject tree = ctx.objects.populate().filter(REDWOOD_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (tree != null) {
                tree.click("Cut");
                status("Cutting daRedwood lol");
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("falls out of the tree")) {
                picked_items++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        Font font = new Font("Arial", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.decode("#1C6497"));
        g.drawString("daRedwood    v. " + "1.0", 385, 286);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 385, 298);
        g.drawString("Status: " + status, 385, 308);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 385, 320);
        g.drawString("Bird Nests: " + ctx.paint.formatValue(picked_items) + " (" + ctx.paint.valuePerHour(picked_items, startTime) + " /Hour)", 385, 332);
    }
}

'''
'''--- Battlescape/SimpleBot-daRedwood2/Tasks/daBankTask.java ---
package daTaskScript.Tasks;

import simple.hooks.scripts.task.Task;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.api.ClientContext;
import daTaskScript.daTaskScriptMain;

public class daBankTask extends Task {
    public daBankTask(ClientContext ctx) {
        super(ctx);
    }

    @Override
    public boolean condition() {
        return ctx.inventory.inventoryFull();
    }

    @Override
    public void run() {
        SimpleObject bank = ctx.objects.populate().filter(25937).nearest().next();
        if (bank == null) {
            return;
        }
        if (!ctx.bank.depositBoxOpen()) {
            daTaskScriptMain.status("Open deposit box");
            bank.click(0);
            ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
        } else if (ctx.inventory.inventoryFull()) {
            daTaskScriptMain.status("Banking 1");
            ctx.bank.depositInventory();
            ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
        }
        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            daTaskScriptMain.status("Closing Bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> !ctx.bank.depositBoxOpen(), 2500);
        }
    }

    @Override
    public String status() {
        return "";
    }
}
'''
'''--- Battlescape/SimpleBot-daRedwood2/Tasks/daChopTask.java ---
package daTaskScript.Tasks;

import daTaskScript.daTaskScriptMain;
import simple.hooks.scripts.task.Task;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.api.ClientContext;

public class daChopTask extends Task {
    public daChopTask(ClientContext ctx) {
        super(ctx);
    }

    @Override
    public boolean condition() {
        return !ctx.inventory.inventoryFull();
    }

    @Override
    public void run() {

        if (ctx.players.getLocal().getAnimation() == -1) {
            SimpleObject tree = ctx.objects.populate().filter(29668).nextNearest();
            if (tree != null) {
                daTaskScriptMain.status("Cutting Redwood");
                tree.click("Cut");
                ctx.sleep(2500);
                }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public String status() {
        return "";
    }
}
'''
'''--- Battlescape/SimpleBot-daRedwood2/daTaskScriptMain.java ---
package daTaskScript;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import daTaskScript.Tasks.daBankTask;
import daTaskScript.Tasks.daChopTask;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.scripts.task.TaskScript;
import simple.hooks.simplebot.ChatMessage;

@ScriptManifest(
        author = "alex",
        category = Category.WOODCUTTING,
        description = "<html>"
                + "<p>Basically daRedwood but task based</p>"
                + "<p><strong>Cuts redwood @ home in Battlescape</strong>.</p>"
                + "<ul>"
                + "<li><strong>Start @ da big redwood at home with the deposit box on ur screen</strong>.</li>"
                + "<li><strong>Have an axe equipped and dont worry about bird nests or logs, it picks up bird nests and bank em along with logs</strong>.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daRedwood2",
        servers = {"Battlescape"},
        version = "3.0"
)

public class daTaskScriptMain extends TaskScript {
    public static String status;
    public long startTime;
    public int startExperience, picked_items;
    private static final int[] BIRD_NEST = {5070, 5072, 5071};
    private static boolean hidePaint = false;
    private List tasks = new ArrayList();

    @Override
    public void onExecute() {
        tasks.addAll(Arrays.asList(new daBankTask(ctx), new daChopTask(ctx)));// Adds our tasks to our {task} list for execution
        System.out.println("Started daRedwood!");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public List tasks() {
        return tasks;// Tells our TaskScript these are the tasks we want executed
    }

    @Override
    public boolean prioritizeTasks() {
        return true;// Will prioritize tasks in order added in our {tasks} List
    }

    // This method is not needed as the TaskScript class will call it, itself
    @Override
    public void onProcess() {
        // Can add anything here before tasks have been ran
        super.onProcess();// Needed for the TaskScript to process the tasks
        //Can add anything here after tasks have been ran
        if (!ctx.groundItems.populate().filter(BIRD_NEST).isEmpty() && !ctx.inventory.inventoryFull()) {
            status("Looting items");
            ctx.groundItems.nearest().next().click("Take");
            ctx.sleep(2000);
        } // picks up whatever u tell it to lol
    }

    @Override
    public void onTerminate() {
    }

    public static void status(final String status) {
        daTaskScriptMain.status = status;
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("falls out of the tree")) {
                picked_items++;
            }
        }
    }

    @Override
    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING) - startExperience;
            g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp / 1000, startTime) + "k/Hour)", 385, 320);
            g.drawString("Bird Nests: " + ctx.paint.formatValue(picked_items) + " (" + ctx.paint.valuePerHour(picked_items, startTime) + " /Hour)", 385, 332);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daRedwood   v" + "3.0", 380, 274);
        }
    }
}
'''
'''--- Battlescape/SimpleBot-daRobber/daRobberMain.java ---
package daRobber;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;

import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

@ScriptManifest(
        author = "alex",
        category = Category.THIEVING,
        description = "<html>"
                + "<p>Dumb master farmer thief for Battlescape</p>"
                + "<p><strong>Performs pickpockets</strong></p>"
                + "<ul>"
                + "<li><strong>Start @ home at the master farmer place</strong>.</li>"
                + "<li><strong>Drops the useless shit and keeps the good shit</strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daRobber",
        servers = {"Battlescape"},
        version = "3.0"
)

public class daRobberMain extends Script {
    public String status;
    public long startTime;
    public int startExperience, times_stole;
    private static final int DA_VICTIM_ID = 3257;
    public int[] itemIds = {5306, 5281, 5324, 5318, 5322, 5096, 5319, 5308, 5101, 5305, 5309, 5329, 5307, 5320, 5282, 5280, 5098, 5102, 5310, 5099, 5318, 5311, 5104, 5322, 5099, 5103, 5105, 5106, 5291, 5292, 5293};
    //up there be a bunch of item IDs for seeds, these items will be dropped, anything else will be kept
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daRobber");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.THIEVING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        SimpleNpc pickpocket_ore = ctx.npcs.populate().filter(DA_VICTIM_ID).nearest().next();

        if (pickpocket_ore != null) {
            pickpocket_ore.click(0);
            status("Robbing");
        }

        if (ctx.inventory.inventoryFull()){
            for (int itemId : itemIds) {
                if (ctx.inventory.populate().filter(itemId).next() != null){
                    ctx.inventory.dropItem(ctx.inventory.populate().filter(itemId).next());
                }
            }
        }
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("ou pick the")) {
                times_stole++;
            }
        }
    }

    @Override
    public void onTerminate() {
        System.out.println("You stole this many times:");
        System.out.println(times_stole);
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.experience(SimpleSkills.Skills.THIEVING) - startExperience;
            g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp / 1000, startTime) + "k)", 380, 308);
            g.drawString("Pickpockets: " + ctx.paint.formatValue(times_stole) + " (" + ctx.paint.valuePerHour(times_stole, startTime) + ")", 380, 320);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daRobber  v. " + "2.0", 380, 274);
        }
    }
}
'''
'''--- Battlescape/daAgility/daMain.java ---
package daAgility;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleSkills.Skills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.simplebot.Pathing;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

import java.awt.*;

@ScriptManifest(author = "Reminisce && Alex", category = Category.AGILITY, description = "Does agility course", discord = "empty",
        name = "daAgility", servers = { "Battlescape" }, version = "0.1")
public class daMain extends Script {

    public String status;
    public long startTime;
    public int startExperience;
    private final WorldPoint gap3_problem = new WorldPoint(2653, 3310, 3);

    public void onExecute() {
        this.status("Starting daAgility!!!");
        this.startExperience = ctx.skills.experience(Skills.AGILITY);
        this.startTime = System.currentTimeMillis();
    }

    public void onProcess() {
        final Pathing pathing = ctx.pathing;
        WorldPoint currentLocation = ctx.players.getLocal().getLocation();

        if (pathing.reachable(new WorldPoint(2673, 3298, 0))) {
            interactWithObstacle("Climbing Wooden beams", "wooden beams", "climb-up", new WorldPoint(2671, 3299, 3));
        } else if (currentLocation.distanceTo(new WorldPoint(2671, 3299, 3)) == 0) {
            interactWithObstacle("Jumping gap", "Gap", "Jump", new WorldPoint(2665, 3318, 3));
        } else if (currentLocation.distanceTo(new WorldPoint(2665, 3318, 3)) == 0) {
            interactWithObstacle("Crossing plank", "Plank", "Walk-on", new WorldPoint(2656, 3318, 3));
        } else if (currentLocation.distanceTo(new WorldPoint(2656, 3318, 3)) == 0) {
            interactWithObstacle("Jumping gap 2", "Gap", "Jump", new WorldPoint(2653, 3314, 3));
        } else if (currentLocation.distanceTo(new WorldPoint(2653, 3314, 3)) == 0) {
            pathing.step(new WorldPoint(2653, 3310, 3));
            ctx.sleep(1000);
            if (currentLocation.distanceTo(new WorldPoint(2653, 3314, 3)) == 0) {
                ctx.sleep(1000);
                interactWithObstacle("Jumping gap 3", "Gap", "Jump", new WorldPoint(2651, 3309, 3));
            }
        } else if (currentLocation.distanceTo(new WorldPoint(2651, 3309, 3)) == 0) {
            interactWithObstacle("Balancing across roof", "Steep roof", "Balance-across", new WorldPoint(2656, 3297, 3));
        } else if (currentLocation.distanceTo(new WorldPoint(2656, 3297, 3)) == 0) {
            interactWithObstacle("Last Gap", "Gap", "Jump", new WorldPoint(2668, 3297, 3));
        }
    }

    private void interactWithObstacle(String status, String objectName, String action, WorldPoint nextLocation) {
        final SimpleObject o = ctx.objects.populate().filter(objectName).filterHasAction(action).nearest().next();
        if (o != null && o.validateInteractable()) {
            this.status(status);
            if (o.click(action)) {
                ctx.onCondition(() -> !ctx.pathing.reachable(nextLocation), 250, 14);
            }
        }
    }

    @Override
    public void onTerminate() {
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;
        Font font = new Font("Arial", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.decode("#1C6497"));
        g.drawString("daAgility    v. " + "1.0", 385, 286);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 385, 298);
        g.drawString("Status: " + status, 385, 308);
        int totalExp = ctx.skills.experience(Skills.AGILITY) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 385, 320);
        }

    public void status(final String status) {
        this.status = status;
    }

    @Override
    public void onChatMessage(final ChatMessage e) {
    }

}
'''
'''--- Battlescape/daAmethyst/daMain.java ---
package daAmethyst;

import java.awt.*;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "unix && alex", category = Category.MINING, description = "Mines amethyst and banks it all", discord = "empty",
        name = "daAmethyst miner", servers = { "Battlescape" }, version = "1.0")
public class daMain extends Script {

    public String status;
    public long startTime;
    public int startExperience, minerals;
    private static final int DEPOSIT_BOX = 25937;
    private static final int AMETHYST_ID = 11388;

    @Override
    public void onExecute() {
        System.out.println("Started daAmethyst!!!");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.MINING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter(DEPOSIT_BOX).nearest().next();
            if (bank == null) {
                return;
            }
            if (!ctx.bank.depositBoxOpen()) {
                status("Banking 1");
                bank.click(0);
                ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
                return;
            }
        } //keep this shit bruh, always first, checks if inv full lol

        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            status("Close bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> !ctx.bank.depositBoxOpen(), 2500);
        }

        SimpleObject ore = ctx.objects.populate().filter(AMETHYST_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (ore != null) {
                status("Smashing");
                ore.click(0);
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("be interested in these unidentified minerals")) {
                minerals++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;
        Font font = new Font("Arial", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.decode("#1C6497"));
        g.drawString("daAmethyst    v. " + "1.0", 385, 286);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 385, 298);
        g.drawString("Status: " + status, 385, 308);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.MINING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 385, 320);
        g.drawString("Minerals: " + ctx.paint.formatValue(minerals) + " (" + ctx.paint.valuePerHour(minerals, startTime) + " /Hour)", 385, 332);

    }
}
'''
'''--- Battlescape/daAnglos/daMain.java ---
package daAnglos;

import java.awt.*;

import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.FISHING, description = "*Fucks* fishes and banks em up", discord = "",
        name = "daAnglos", servers = { "Battlescape" }, version = "1.2")

public class daMain extends Script {
    public String status;
    public long startTime;
    public int startExperience, fishes, crazy_fishes;
    private static final int FISH_ORE_ID = 6825;

    @Override
    public void onExecute() {
        System.out.println("Started daAnglos");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.FISHING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter("Bank chest").nearest().next();
            if (bank == null) {
                return;
            }
            if (ctx.bank.bankOpen() == false) {
                status("Banking 1");
                bank.click("Bank");
                ctx.sleepCondition(() -> ctx.bank.bankOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositAllExcept(307,13431);
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                return;
            }
        }

        if (ctx.bank.bankOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> ctx.bank.bankOpen() == false, 2500);
        }

        SimpleNpc fish_ore = ctx.npcs.populate().filter(FISH_ORE_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (fish_ore != null) {
                fish_ore.click("Bait");
                status("Fishing");
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("ou catch a")) {
                fishes++;
            }
            if (message.contains("seller might be interested in this unusual fish")) {
                crazy_fishes++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.DARK_GRAY);
        g.fillRect(368, 260, 150, 75);
        g.setColor(Color.BLACK);
        g.drawRect(368, 260, 150, 75);

        Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
        g.setFont(font1);
        g.setColor(Color.GRAY);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
        g.drawString("Status: " + status, 380, 298);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.FISHING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k)", 380, 308);
        g.drawString("Fishes: " + ctx.paint.formatValue(fishes) + " (" + ctx.paint.valuePerHour(fishes, startTime) + ")", 380, 320);
        g.drawString("Unusuals: " + ctx.paint.formatValue(crazy_fishes) + " (" + ctx.paint.valuePerHour(crazy_fishes, startTime) + ")", 380, 332);
        Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font2);
        g.setColor(Color.WHITE);
        g.drawString("daAnglos  v. " + "1.2", 380, 274);
    }
}
'''
'''--- Battlescape/daBarrows/daBarrowsMain.java ---
package daBarrows;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.regex.Pattern;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimplePrayers;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleObject;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;
import simple.robot.utils.WorldArea;

@ScriptManifest(author = "alex", category = Category.MONEYMAKING, description = "", discord = "",
        name = "daBarrows", servers = { "Battlescape" }, version = "2.0")

public class daBarrowsMain extends Script {
    public String status;
    public long startTime;
    private boolean presetClicked = false; // 20973 is the chest @ barrows
    private boolean killedVerac = false;

    public static final WorldArea HOME = new WorldArea(
            new WorldPoint(3085, 3493, 0),
            new WorldPoint(3105, 3513, 0));

    public static final WorldArea BARROWS_AREA = new WorldArea(
            new WorldPoint(3545, 3320, 0),
            new WorldPoint(3585, 3267, 0));

    public static final WorldArea VERAC_AREA = new WorldArea(
            new WorldPoint(3588, 9696, 3),
            new WorldPoint(3568, 9716, 3));

    @Override
    public void onExecute() {
        System.out.println("Started daBarrows");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        status("in da first");
        SimpleItem seedPod = ctx.inventory.populate().filter(19564).next();
        SimplePrayers prayers = new SimplePrayers(ctx);
        SimpleItem potion = ctx.inventory.populate().filter(Pattern.compile("Prayer potion\\(\\d+\\)")).next();
        SimpleItem spade = ctx.inventory.populate().filter(952).next();

        if (!presetClicked && HOME.containsPoint(ctx.players.getLocal())) {
            clickPreset();
            presetClicked = true;
        }

        if (HOME.containsPoint(ctx.players.getLocal())){
            ctx.teleporter.open();
            ctx.teleporter.teleportStringPath("Minigames","Barrows");
            status("go barrows moment");
        }

        if (BARROWS_AREA.containsPoint(ctx.players.getLocal()) && seedPod != null && potion == null  && prayers.points() <= 20){
            seedPod.click(0);
            status("go home moment");
            presetClicked = false;
        }

        if (BARROWS_AREA.containsPoint(ctx.players.getLocal()) && !killedVerac) {
            status("trying to skip verac 1st");
            skipVerac();
            presetClicked = false;
        }

    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    @Override
    public void onTerminate() {
    }

    public void status(final String status) {
        this.status = status;
    }

    private void clickPreset() {
        status("preset moment");
        SimpleWidget offtaskBarrows = ctx.widgets.getWidget(702, 87);
        SimpleWidget questTab = ctx.widgets.getWidget(548, 50);
        SimpleWidget loadOuts = ctx.widgets.getWidget(702, 5);
        if (questTab != null && !questTab.isHidden()){
            questTab.click(0);
            if (loadOuts != null && !loadOuts.isHidden()){
                loadOuts.click(0);
                if (offtaskBarrows != null && !offtaskBarrows.isHidden()) {
                    offtaskBarrows.click(0);
                }
            }
        }
    }

    private void skipVerac() {
        status("skipping verac");
        ctx.pathing.step(new WorldPoint(3557, 3300, 0));
        SimpleItem spade = ctx.inventory.populate().filter(952).next();
        SimpleItem skipItem = ctx.inventory.populate().filter(60038).next();
        WorldPoint currentLocation = ctx.players.getLocal().getLocation();
        SimpleObject veracCoffin = ctx.objects.populate().filter(20772).nearest().next();
        SimpleObject sStairs = ctx.objects.populate().filter(20672).nearest().next();

        if (currentLocation.equals(new WorldPoint(3557, 3300, 0))) {
            spade.click(0);
            status("move skip verac");
        }
        if (currentLocation.equals(new WorldPoint(3578, 9706, 3)) && skipItem != null){
            skipItem.click(0);
            veracCoffin.click(0);
            ctx.sleepCondition(() -> ctx.pathing.inMotion() == true, 2000);
            status("skip varoc click");
        }
        if (currentLocation.equals(new WorldPoint(3578, 9706, 3)) ){
            sStairs.click(0);
            status("leaving verac crypt");
        }
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.BLACK);
        g.fillRect(5, 2, 192, 58);
        g.setColor(Color.decode("#ea411c"));
        g.drawRect(5, 2, 192, 58);
        g.drawLine(8, 24, 194, 24);

        g.setColor(Color.decode("#e0ad01"));
        g.drawString("RBarrows                             v. " + "0.1", 12, 20);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 14, 42);
        g.drawString("Status: " + status, 14, 56);
    }
}
'''
'''--- Battlescape/daChickenKeys/daChickenKeysMain.java ---
package daChickenKeys;

import java.awt.*;
import java.util.regex.Pattern;
import java.awt.Graphics;
import java.awt.Graphics2D;

import simple.hooks.filters.SimplePrayers;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleGroundItem;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(
        author = "alex",
        category = Category.MONEYMAKING,
        description = "<html>"
                + "<p><strong>Helps you do slayer</strong>.</p>"
                + "<ul>"
                + "<li><strong>Start whenever you want, it does actions only when it needs to</strong>.</li>"
                + "<li><strong>It drinks prayer pots and collects items for you</strong>.</li>"
                + "<li><strong>It picks up clues, ckey pieces,barrows amulets, dark totem pieces, ancient sharks, brim keys and some valuable items</strong>.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daSlayerHelper",
        servers = {"Battlescape"},
        version = "2.0"
)

public class daChickenKeysMain extends Script {
    public String status;

    public long startTime;
    private static final int[] DESIRED_ITEMS = {985, 987, 989, 4151, 19677, 19679, 19681, 19683, 23083, 60005, 60006, 60007, 60038, 60053, 60054, 60055, 60056};
    /*
    60053 & 60054 & 60055 & 60056 coin bags 1, 2, 3, 4
    60005 & 60006 & 60007 med hard elite clue
    985 & 987 key pieces, tooth and loop 989 is the key
    19677 ancient shard
    19679 & 19681 & 19683 base, middle, top totem pieces
    23083 brimstone key
    4151 abby whip
    60038 barrows amulet
    */
    private static final int BANKING_OBJECT = 25937;
    public int TOOTH_PIECE, LOOP_PIECE, KEYS, COIN_BAGS_1, COIN_BAGS_2, COIN_BAGS_3, COIN_BAGS_4;

    @Override
    public void onExecute() {
        System.out.println("Started daSlayerHelper");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        SimplePrayers prayers = new SimplePrayers(ctx);
        SimpleObject bank = ctx.objects.populate().filter(BANKING_OBJECT).nearest().next();
        SimpleGroundItem items = ctx.groundItems.populate().filter(DESIRED_ITEMS).nearest().next();

        if (ctx.inventory.inventoryFull()) {
            if (bank == null) {
                return;
            }
            if (!ctx.bank.depositBoxOpen()) {
                status("Banking 1");
                bank.click("Deposit");
                ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
                return;
            }
        }

        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> !ctx.bank.depositBoxOpen(), 2500);
        }

        if (!ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty()) {
            status("Looting items");
            items.click("Take");
            ctx.sleepCondition(() -> !ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty(), 1000);
        } // picks up whatever u tell it to lol

        if (prayers.points() <= 30){
            final SimpleItem potion = ctx.inventory.populate().filter(Pattern.compile("Prayer potion\\(\\d+\\)")).next();
            final int cached = ctx.prayers.points();
            status("Drinking Prayer Potion");
            if (potion != null && potion.click(0)) {
                ctx.onCondition(() -> ctx.prayers.points() > cached, 250, 12);
            }
        } // da pray point check and use pot

        if (ctx.skills.level(SimpleSkills.Skills.ATTACK) <= 99) {
            final SimpleItem potionS = ctx.inventory.populate().filter(Pattern.compile("Divine super combat potion\\(\\d+\\)")).next();
            status("Drinking DSCombat Potion");
            if (potionS != null) {
                potionS.click(0);
            }
        } // da combat pot check and drinking

        status("Attacking shit");
        TOOTH_PIECE = ctx.inventory.populate().filter(985).population(); //count how many items ya got in da inv
        LOOP_PIECE = ctx.inventory.populate().filter(987).population();
        KEYS = ctx.inventory.populate().filter(989).population()*2;
        COIN_BAGS_1 = ctx.inventory.populate().filter(60053).population(true); //same shit but for stack-able shit like clues or coin bags
        COIN_BAGS_2 = ctx.inventory.populate().filter(60054).population(true);
        COIN_BAGS_3 = ctx.inventory.populate().filter(60055).population(true);
        COIN_BAGS_4 = ctx.inventory.populate().filter(60056).population(true);
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.DARK_GRAY);
        g.fillRect(368, 260, 150, 75);
        g.setColor(Color.BLACK);
        g.drawRect(368, 260, 150, 75);
        //g.fillRect(0, 338, 519, 165); //perfect black chat box

        Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
        g.setFont(font1);
        g.setColor(Color.GRAY);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
        g.drawString("Status: " + status, 380, 298);
        g.drawString("Pieces: " + ctx.paint.formatValue(TOOTH_PIECE + LOOP_PIECE + KEYS) + " (" + KEYS/2 + " Keys)", 380, 308);
        g.drawString("Bags: " + ctx.paint.formatValue(COIN_BAGS_1 + COIN_BAGS_2 + COIN_BAGS_3 + COIN_BAGS_4), 380, 320);
        Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font2);
        g.setColor(Color.WHITE);
        g.drawString("daSlayerHelper  v. " + "2.0", 380, 274);
        }
}

'''
'''--- Battlescape/daCleaner/daCleanerMain.java ---
package daCleaner;

import java.awt.*;
import java.util.regex.Pattern;
import java.awt.Graphics;
import java.awt.Graphics2D;

import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleGroundItem;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.HERBLORE, description = "Cleans all of ur grimy herbs", discord = "empty",
        name = "daCleaner", servers = { "Battlescape" }, version = "1.5")
public class daCleanerMain extends Script {
    public String status;
    public long startTime, currentExp;
    private static final int[] BANKING_OBJECT = {29321, 22819}; //ids for chests, bank booths etc
    public int count, startExperience;
    public int[] HerbIDs = {199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 222, 3051, 2485, 3049};
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daCleaner");
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
        currentExp = this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
    }

    @Override
    public void onProcess() {

        if (currentExp != this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE)) {
            count++;
            currentExp = this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
        }

        SimpleObject bank = ctx.objects.populate().filter(BANKING_OBJECT).nearest().next();
        SimpleItem herb = ctx.inventory.populate().filter(item -> item.getName().matches(".*Grimy.*")).next();

        if (herb != null && !ctx.bank.bankOpen()) {
            status("Cleaning");
            herb.click(0);
        }

        if (herb == null) {
            if (bank == null) {
                return;
            }
            if (!ctx.bank.bankOpen()) {
                status("Banking 1");
                bank.click(0);
                ctx.sleepCondition(() -> ctx.bank.bankOpen(), 2500);
                return;
            } else if (herb == null) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
                for (int itemId : HerbIDs) {
                    ctx.bank.withdraw(itemId, 28);
                    if (ctx.inventory.inventoryFull()){
                        break;
                    }
                }
                ctx.bank.closeBank();
            }
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint){
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            g.drawString("Cleaned: " + ctx.paint.formatValue(count), 380, 308);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daCleaner  v. " + "2.0", 380, 274);
        }
        }
}

'''
'''--- Battlescape/daDonorAddyBodies/daDonorAddyBodiesMain.java ---
package daDonorAddyBodies;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.regex.Pattern;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimplePrayers;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleObject;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.SMITHING, description = "", discord = "",
        name = "daDonorAddyBodies", servers = { "Battlescape" }, version = "2.0")

public class daDonorAddyBodiesMain extends Script {
    public String status;
    public long startTime;
    private boolean presetClicked = false; // 20973 is the chest @ barrows

    @Override
    public void onExecute() {
        System.out.println("Started daDonorAddyBodies");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        status("in da first");
        SimpleItem addyBar = ctx.inventory.populate().filter(2361).next();
        SimpleObject anvil = ctx.objects.populate().filter(2031).nearest().next();

        if (addyBar != null || addyBar.getQuantity() < 5) {
            ctx.pathing.step(new WorldPoint(3044, 3502, 0));
            if (ctx.players.getLocal().getLocation().equals(new WorldPoint(3044, 3502, 0))){
                clickPreset();
            }
        }

        if (addyBar.getQuantity() >= 5) {
            status("Click anvil");
            anvil.click(0);
            if (anvil.validateInteractable()) {
                makeBody();
            }
        }

    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    @Override
    public void onTerminate() {
    }

    public void status(final String status) {
        this.status = status;
    }

    private void clickPreset() {
        status("preset moment");
        SimpleWidget preset = ctx.widgets.getWidget(702, 89);
        SimpleWidget questTab = ctx.widgets.getWidget(548, 50);
        SimpleWidget loadOuts = ctx.widgets.getWidget(702, 5);
        if (questTab != null && !questTab.isHidden()){
            questTab.click(0);
            if (loadOuts != null && !loadOuts.isHidden()){
                loadOuts.click(0);
                if (preset != null && !preset.isHidden()) {
                    preset.click(0);
                    ctx.sleep(15000);
                }
            }
        }
    }

    private void makeBody() {
        status("making bodies & shit");
        SimpleWidget smithingWindow = ctx.widgets.getWidget(312, 0);
        SimpleWidget bodyWindow = ctx.widgets.getWidget(312, 15).getDynamicChildren()[2];
        if (smithingWindow != null && !smithingWindow.isHidden()) {
            if (bodyWindow != null && !bodyWindow.isHidden()){
                if (ctx.getClient().getLocalPlayer().getAnimation() == -1) {
                    bodyWindow.click(5);
                    ctx.sleep(2500);
                }
            }
        }
        }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.BLACK);
        g.fillRect(5, 2, 192, 58);
        g.setColor(Color.decode("#ea411c"));
        g.drawRect(5, 2, 192, 58);
        g.drawLine(8, 24, 194, 24);

        g.setColor(Color.decode("#e0ad01"));
        g.drawString("RBarrows                             v. " + "0.1", 12, 20);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 14, 42);
        g.drawString("Status: " + status, 14, 56);
    }
}
'''
'''--- Battlescape/daDonorRc/daDonorRcMain.java ---
package daDonorRc;

import java.awt.*;
import java.util.regex.Pattern;
import java.awt.Graphics;
import java.awt.Graphics2D;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleGroundItem;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(
        author = "alex",
        category = Category.RUNECRAFTING,
        description = "<html>"
                + "<p>Dumb rooncrafter for Battlescape</p>"
                + "<p><strong>makes roones</strong></p>"
                + "<ul>"
                + "<li>Start <strong>@ the second bank chest at ::dz with the roone altar on ur screen</strong>.</li>"
                + "<li><strong>Have pure ess in ur bank lel</strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daDonorRc",
        servers = {"Battlescape"},
        version = "2.0"
)

public class daDonorRcMain extends Script {
    public String status;
    public long startTime, currentExp;
    private static final int[] BANKING_OBJECT = {29321, 22819}; //ids for chests, bank booths etc
    public int count, startExperience;
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daDonorRc");
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.RUNECRAFT);
        currentExp = this.ctx.skills.experience(SimpleSkills.Skills.RUNECRAFT);
    }

    @Override
    public void onProcess() {
        SimpleObject bank = ctx.objects.populate().filter(BANKING_OBJECT).nearest().next();
        SimpleItem rune = ctx.inventory.populate().filter(7936).next();
        SimpleObject altar = ctx.objects.populate().filter(29631).nearest().next();

        if (rune != null && !ctx.bank.bankOpen()) {
            status("rooning");
            altar.click(0);
            count++;
        }

        if (rune == null) {
            if (bank == null) {
                return;
            }
            if (ctx.bank.bankOpen() == false) {
                ctx.pathing.step(new WorldPoint(3032, 3492, 0));
                status("Banking 1");
                bank.click(0);
                ctx.sleepCondition(() -> ctx.bank.bankOpen(), 2500);
            } else if (rune == null) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                ctx.bank.withdraw(7936, 28);
                ctx.bank.closeBank();
            }
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(10, 338, 510, 140);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint){
            Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("imgRC.png"));
            g.drawImage(image, 0, 338,null);
            g.setColor(Color.RED);
            g.drawRect(0, 338, 519, 165);

            Font font1 = new Font("Karla", Font.BOLD, 18); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 20, 450);
            g.drawString("Status: " + status, 20, 410);
            int totalExp = ctx.skills.experience(SimpleSkills.Skills.RUNECRAFT) - startExperience;
            g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp / 1000, startTime) + "k)", 20, 430);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("2.0", 330, 377);
        }
    }
}

'''
'''--- Battlescape/daFish/daMain.java ---
package daFish;

import java.awt.*;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.queries.SimpleEntityQuery;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.FISHING, description = "*Fucks* fishes and banks em up", discord = "empty",
        name = "daFish Fucker", servers = { "Battlescape" }, version = "1.0")

public class daMain extends Script {
    public String status;
    public long startTime;
    public int startExperience, fishes, crazy_fishes;
    private static final int FISH_ORE_ID = 1511;

    @Override
    public void onExecute() {
        System.out.println("Started daFish Fucker");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.FISHING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter("Bank chest").nearest().next();
            if (bank == null) {
                return;
            }
            if (ctx.bank.bankOpen() == false) {
                status("Banking 1");
                bank.click("Bank");
                ctx.sleepCondition(() -> ctx.bank.bankOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                return;
            }
        }

        if (ctx.bank.bankOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> ctx.bank.bankOpen() == false, 2500);
        }

        // no need for a pick up items thingy

        SimpleNpc fish_ore = ctx.npcs.populate().filter(FISH_ORE_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (fish_ore != null) {
                fish_ore.click("Harpoon");
                status("Fishing");
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("ou catch a")) {
                fishes++;
            }
            if (message.contains("seller might be interested in this unusual fish")) {
                crazy_fishes++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.DARK_GRAY);
        g.fillRect(368, 260, 150, 75);
        g.setColor(Color.BLACK);
        g.drawRect(368, 260, 150, 75);

        Font font = new Font("Arial", Font.CENTER_BASELINE, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.GRAY);
        g.drawString("daFish Fucker v. " + "1.0", 380, 274);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
        g.drawString("Status: " + status, 380, 298);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.FISHING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 380, 308);
        g.drawString("Fishes: " + ctx.paint.formatValue(fishes) + " (" + ctx.paint.valuePerHour(fishes, startTime) + " /Hour)", 380, 320);
        g.drawString("Unusuals: " + ctx.paint.formatValue(crazy_fishes) + " (" + ctx.paint.valuePerHour(crazy_fishes, startTime) + " /Hour)", 380, 332);
    }
}
'''
'''--- Battlescape/daGemCutter/daGemCutterMain.java ---
package daGemCutter;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

@ScriptManifest(
        author = "alex",
        category = Category.CRAFTING,
        description = "<html>"
                + "<p>Dumb gem cutter for Battlescape</p>"
                + "<p><strong>cuts gems</strong></p>"
                + "<ul>"
                + "<li>Start <strong>on a preset ok tile</strong>.</li>"
                + "<li><strong>Have your first preset set to have 27 gems and a chisel</strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daGemCutter",
        servers = {"Battlescape"},
        version = "2.0"
)

public class daGemCutterMain extends Script {
    public String status;
    public long startTime;
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daGemCutter");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        status("Cutting");
        SimpleItem chisel = ctx.inventory.populate().filter(1755).next();
        SimpleItem gem = ctx.inventory.populate().filter(1617).next();

        if (chisel == null || gem == null) {
            clickPreset();
        }

        if (chisel != null && gem != null && !ctx.players.getLocal().isAnimating()) {
            chisel.click(0);
            gem.click(0);
            if (ctx.dialogue.dialogueOpen()) {
                int SPACE_BUTTON = KeyEvent.VK_SPACE;
                ctx.keyboard.clickKey(SPACE_BUTTON);
            }
        }

    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    @Override
    public void onTerminate() {
    }

    public void status(final String status) {
        this.status = status;
    }

    private void clickPreset() {
        status("preset moment");
        SimpleWidget preset = ctx.widgets.getWidget(702, 38);
        SimpleWidget questTab = ctx.widgets.getWidget(548, 50);
        SimpleWidget loadOuts = ctx.widgets.getWidget(702, 5);
        if (questTab != null && !questTab.isHidden()) {
            questTab.click(0);
            if (loadOuts != null && !loadOuts.isHidden()) {
                loadOuts.click(0);
                if (preset != null && !preset.isHidden()) {
                    preset.click(0);
                }
            }
        }
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daGemCutter  v. " + "2.0", 380, 274);
        }
    }
}
'''
'''--- Battlescape/daGems/daMain.java ---
package daGems;

import java.awt.*;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.queries.SimpleEntityQuery;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.MINING, description = "Smashes gem rocks and banks it all", discord = "empty",
        name = "daGem Smasher", servers = { "Battlescape" }, version = "1.0")
public class daMain extends Script {

    private final WorldPoint BANK_TILE = new WorldPoint(3124, 3458, 0); // The bank tile we want to step to for banking

    public String status;

    public long startTime;
    public int startExperience, minerals;

    private static final int[] DROPPED_ITEMS = {5070, 5072, 5071};
    private static final int DEPOSIT_BOX = 25937;
    private static final int GEM_ID = 11380;

    @Override
    public void onExecute() {
        System.out.println("Started daGems");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.MINING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter(DEPOSIT_BOX).nearest().next();
            if (bank == null) {
                return;
            }
            if (ctx.bank.depositBoxOpen() == false) {
                status("Banking 1");
                bank.click("Deposit");
                ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                return;
            }
        }

        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> ctx.bank.depositBoxOpen() == false, 2500);
        }

        if (ctx.groundItems.populate().filter(DROPPED_ITEMS).isEmpty() == false) {
            status("Looting items");
            ctx.groundItems.nearest().next().click("Take");
            ctx.sleep(2000);
            return;
        } // picks up whatever u tell it to lol

        SimpleObject rock = ctx.objects.populate().filter(GEM_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (rock != null) {
                rock.click("Mine");
                status("call me a jeweler cuz im smashing gems fr fr");
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("be interested in these unidentified minerals")) {
                minerals++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        Font font = new Font("Arial", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.decode("#1C6497"));
        g.drawString("daGems    v. " + "1.0", 385, 286);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 385, 298);
        g.drawString("Status: " + status, 385, 308);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.MINING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 385, 320);
        g.drawString("Minerals: " + ctx.paint.formatValue(minerals) + " (" + ctx.paint.valuePerHour(minerals, startTime) + " /Hour)", 385, 332);
    }
}
'''
'''--- Battlescape/daMinnows/daMinnowsMain.java ---
package daMinnows;

import java.awt.*;

import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.FISHING, description = "*Fucks* fishes and banks em up", discord = "",
        name = "daMinnows", servers = { "Battlescape" }, version = "1.2")

public class daMinnowsMain extends Script {
    public String status;
    public long startTime;
    public int startExperience, fishes, crazy_fishes;
    private static final int FISH_ORE_ID = 7730;

    @Override
    public void onExecute() {
        System.out.println("Started daMinnows");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.FISHING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter("Bank chest").nearest().next();
            if (bank == null) {
                return;
            }
            if (ctx.bank.bankOpen() == false) {
                status("Banking 1");
                bank.click("Bank");
                ctx.sleepCondition(() -> ctx.bank.bankOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositAllExcept(307,13431);
                ctx.sleepCondition(() -> ctx.inventory.inventoryFull() == false, 2500);
                return;
            }
        }

        if (ctx.bank.bankOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> ctx.bank.bankOpen() == false, 2500);
        }

        SimpleNpc fish_ore = ctx.npcs.populate().filter(FISH_ORE_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (fish_ore != null) {
                fish_ore.click(0);
                status("Fishing");
                ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() != -1, 500);
            }
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("ou catch ")) {
                fishes++;
            }
            if (message.contains("seller might be interested in this unusual fish")) {
                crazy_fishes++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.DARK_GRAY);
        g.fillRect(368, 260, 150, 75);
        g.setColor(Color.BLACK);
        g.drawRect(368, 260, 150, 75);

        Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
        g.setFont(font1);
        g.setColor(Color.GRAY);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
        g.drawString("Status: " + status, 380, 298);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.FISHING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k)", 380, 308);
        g.drawString("Fishes: " + ctx.paint.formatValue(fishes) + " (" + ctx.paint.valuePerHour(fishes, startTime) + ")", 380, 320);
        g.drawString("Unusuals: " + ctx.paint.formatValue(crazy_fishes) + " (" + ctx.paint.valuePerHour(crazy_fishes, startTime) + ")", 380, 332);
        Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font2);
        g.setColor(Color.WHITE);
        g.drawString("daMinnows  v. " + "1.2", 380, 274);
    }
}
'''
'''--- Battlescape/daPrayers/daGui.java ---
package daPrayers;

import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.util.Objects;

public class daGui extends JFrame {
    private static final long serialVersionUID = 1L;
    private static final String[] POTIONS = {"Prayer potion"};
    public static JComboBox<String> potionsComboBox;
    private JTextField itemTextField;
    private JButton startButton;
    private JButton pauseButton;

    public daGui() {
        setTitle("eHerbloreBot by Esmaabi, copied by alex");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(Objects.requireNonNull(getClass().getResource("esmaabi-icon.png"))).getImage());

        initGUI();

        pack();
    }

    private void initGUI() {
        JPanel contentPane = new JPanel(new GridBagLayout());
        contentPane.setBackground(Color.DARK_GRAY);
        setContentPane(contentPane);

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.insets = new Insets(5, 5, 5, 5);

        // Add title
        constraints.gridy = 0;
        constraints.gridx = 0;
        constraints.gridwidth = 2;
        constraints.anchor = GridBagConstraints.CENTER;
        addLabel("Please choose options below!", contentPane, constraints, true);

        constraints.gridwidth = 1; // Resetting gridwidth
        constraints.anchor = GridBagConstraints.WEST; // Resetting anchor

        constraints.gridy++; // Moving to next row
        constraints.gridx = 0; // Resetting x-axis position to 0

        // Select location
        addLabel("Select potions: ", contentPane, constraints, false);
        constraints.gridx = 1; // Setting x-axis position to 1
        potionsComboBox = addComboBox(contentPane, constraints);
        potionsComboBox.setPreferredSize(new Dimension(150, potionsComboBox.getPreferredSize().height));

        constraints.gridx = 0; // Resetting x-axis position to 0
        constraints.gridy++; // Moving to next row

        // Enter NPC ID only as digits
        addLabel("DO NOT USE: ", contentPane, constraints, false);
        constraints.gridx = 1; // Setting x-axis position to 1
        itemTextField = addTextField(contentPane, constraints);
        itemTextField.setPreferredSize(new Dimension(150, itemTextField.getPreferredSize().height));

        constraints.gridx = 0; // Resetting x-axis position to 0
        constraints.gridy++; // Moving to next row
        constraints.gridwidth = 2; // Resetting gridwidth
        constraints.anchor = GridBagConstraints.CENTER; // Resetting anchor

        // Start and Pause buttons
        JPanel buttonsPanel = new JPanel(new GridLayout(1, 2, 5, 0));
        startButton = new JButton("Start");
        startButton.addActionListener(e -> startBot());
        startButton.setBackground(Color.GREEN);
        buttonsPanel.add(startButton);
        pauseButton = new JButton("Pause");
        pauseButton.addActionListener(e -> pauseBot());
        pauseButton.setVisible(false); // Setting button invisible
        pauseButton.setBackground(Color.RED);
        buttonsPanel.add(pauseButton);
        contentPane.add(buttonsPanel, constraints);
    }

    private void addLabel(String text, Container container, GridBagConstraints constraints, boolean isTitle) {
        JLabel label = new JLabel(text);
        label.setForeground(Color.WHITE);
        if (isTitle) {
            label.setFont(label.getFont().deriveFont(Font.BOLD, 16));
        }
        container.add(label, constraints);
        constraints.gridx++;
    }

    private JComboBox<String> addComboBox(Container container, GridBagConstraints constraints) {
        JComboBox<String> comboBox = new JComboBox<>(POTIONS);
        container.add(comboBox, constraints);
        constraints.gridx = 0;
        constraints.gridy++;

        comboBox.addActionListener(e -> daMain.returnItem = getSelectedPotionIndex());

        return comboBox;
    }

    private JTextField addTextField(Container container, GridBagConstraints constraints) {
        JTextField textField = new JTextField();
        ((PlainDocument) textField.getDocument()).setDocumentFilter(new DigitDocumentFilter());
        container.add(textField, constraints);
        constraints.gridx = 0;
        constraints.gridy++;
        return textField;
    }

    private void startBot() {
        daMain.botStarted = true;
        pauseButton.setVisible(true);
        startButton.setVisible(false);
        itemTextField.setEnabled(false);
        potionsComboBox.setEnabled(false);
        daMain.returnItem = getSelectedPotionIndex();
    }

    private void pauseBot() {
        daMain.botStarted = false;
        pauseButton.setVisible(false);
        startButton.setVisible(true);
        itemTextField.setEnabled(false);
        potionsComboBox.setEnabled(true);
    }

    public JTextField getItemTextField() {
        return itemTextField;
    }

    public int getSelectedPotionIndex() {
        int selectedPotionIndex = potionsComboBox.getSelectedIndex();
        return selectedPotionIndex;
    }

    public int getItemId() {
        String intAsText = getItemTextField().getText();
        int itemId = 0;
        try {
            itemId = Integer.parseInt(intAsText);
        } catch (NumberFormatException e) {
            // Handle the exception, e.g., show an error message or set a default value
        }
        return itemId;
    }

    // DocumentFilter class that accepts only digits
    private static class DigitDocumentFilter extends javax.swing.text.DocumentFilter {
        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string != null && string.chars().allMatch(Character::isDigit)) {
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            if (text != null && text.chars().allMatch(Character::isDigit)) {
                super.replace(fb, offset, length, text, attrs);
            }
        }
    }
}
'''
'''--- Battlescape/daPrayers/daMain.java ---
package daPrayers;

import net.runelite.api.ChatMessageType;
import simple.hooks.filters.SimpleBank;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.LoopingScript;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.scripts.task.Task;
import simple.hooks.scripts.task.TaskScript;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleObject;
import simple.hooks.wrappers.SimplePlayer;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@ScriptManifest(
        author = "alex && Esmaabi",
        category = Category.HERBLORE,
        description = "<html>"
                + "<p>The most effective anvil herblore bot on Zenyte!</p>"
                + "<p><strong>Features & recommendations:</strong></p>"
                + "<ul>"
                + "<li>Start with a <strong>empty inventory</strong>.</li>"
                + "<li>Start <strong>near bank booth or bank chest</strong>.</li>"
                + "<li>Have unfinished potions and secondaries visible in bank</li>"
                + "<li>Zoom in to <strong>see bank close</strong> for better performance.</li>"
                + "<li>At the moment only <strong>making potions</strong> supported.</li>"
                + "</ul>"
                + "</html>",
        discord = "Esmaabi#5752",
        name = "eHerbloreBotZenyte",
        servers = {"Battlescape"},
        version = "0.3"
)

public class daMain extends TaskScript implements LoopingScript {

    private static final String[] BANK_NAME = {"Bank booth", "Bank chest"};

    // Variables
    private long startTime = 0L;
    private long startingSkillLevel;
    private long startingSkillExp;
    private long currentExp;
    private int count;
    private int unfinishedPotionID;
    public static String status = null;
    public static int returnItem;
    private static String nameOfItem = null;
    public int secondIngrediente;
    private long lastAnimation = -1;
    public static boolean botStarted;
    private static boolean hidePaint = false;
    private boolean makingSuperCombat = false;
    private boolean makingStamingPotions = false;
    private static String playerGameName;

    // Gui
    private static daGui gui;
    private void initializeGUI() {
        gui = new daGui();
        gui.setVisible(true);
        gui.setLocale(ctx.getClient().getCanvas().getLocale());
    }

    public enum PotionItems {
        PRAYER_POTIONS("prayer potions", 99, 231);
        private final String nameOfItem;
        private final int unfinishedPotionID;
        private final int secondIngrediente;

        PotionItems(String nameOfItem, int unfinishedPotionID, int secondIngrediente) {
            this.nameOfItem = nameOfItem;
            this.unfinishedPotionID = unfinishedPotionID;
            this.secondIngrediente = secondIngrediente;
        }

        public String getNameOfItem() {
            return nameOfItem;
        }

        public int getUnfinishedPotionID() {
            return unfinishedPotionID;
        }

        public int getSecondIngrediente() {
            return secondIngrediente;
        }
    }

    // Tasks
    private final List<Task> tasks = new ArrayList<>();

    @Override
    public boolean prioritizeTasks() {
        return true;
    }

    @Override
    public List<Task> tasks() {
        return tasks;
    }

    @Override
    public void onExecute() {
        initializeGUI();

        // Other vars
        System.out.println("Started eHerbloreBot!");
        this.ctx.updateStatus("--------------- " + currentTime() + " ---------------");
        this.ctx.updateStatus("-------------------------------");
        this.ctx.updateStatus("           eHerbloreBot        ");
        this.ctx.updateStatus("-------------------------------");

        // Vars
        updateStatus("Setting up bot");
        this.startTime = System.currentTimeMillis();
        this.startingSkillLevel = this.ctx.skills.realLevel(SimpleSkills.Skills.HERBLORE);
        this.startingSkillExp = this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
        currentExp = this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
        lastAnimation = System.currentTimeMillis();
        botStarted = false;
        unfinishedPotionID = 0;
        secondIngrediente = 0;
        makingSuperCombat = false;
        makingStamingPotions = false;
        count = 0;
        ctx.viewport.angle(270);
        ctx.viewport.pitch(true);
        returnItem = PotionItems.PRAYER_POTIONS.ordinal();
    }

    @Override
    public void onProcess() {
        super.onProcess();

        if (!botStarted) {
            getTaskItem();
            return;
        }

        if (currentExp != this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE)) {
            count++;
            currentExp = this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
        }

        if (ctx.dialogue.dialogueOpen() && !makingStamingPotions) {
            int SPACE_BUTTON = KeyEvent.VK_SPACE;
            ctx.keyboard.clickKey(SPACE_BUTTON);
        }

        SimplePlayer localPlayer = ctx.players.getLocal();
        boolean playerIsAnimating = localPlayer.isAnimating();
        if (makingStamingPotions) {
            boolean unfPotionInv = !ctx.inventory.populate().filter(unfinishedPotionID).isEmpty();
            boolean secondIngredienteInv = !ctx.inventory.populate().filter(secondIngrediente).isEmpty();

            if (unfPotionInv && secondIngredienteInv) {
                if (ctx.bank.bankOpen()) {
                    updateStatus("Closing bank task");
                    ctx.bank.closeBank();
                }
                herbStaminaTask();
            } else {
                openingBank();
            }
        } else {

            boolean unfPotionInv = !ctx.inventory.populate().filter(unfinishedPotionID).isEmpty();
            boolean secondIngredienteInv = !ctx.inventory.populate().filter(secondIngrediente).isEmpty();

            if (unfPotionInv && secondIngredienteInv) {
                if (ctx.bank.bankOpen()) {
                    updateStatus("Closing bank task");
                    ctx.bank.closeBank();
                }

                if (!playerIsAnimating && (System.currentTimeMillis() > (lastAnimation + 3000))) {
                    herbTask();
                } else if (playerIsAnimating) {
                    lastAnimation = System.currentTimeMillis();
                }
            } else {
                openingBank();
            }
        }
    }

    // Banking

    private void openingBank() {
        if (ctx.bank.bankOpen()) {
            updateStatus("Depositing items");
            ctx.bank.depositAllExcept(12640); // Amylase
            updateStatus("Withdrawing herblore supplies");
            if (makingStamingPotions) {
                ctx.bank.withdraw(unfinishedPotionID, 27);
                ctx.bank.withdraw(secondIngrediente, SimpleBank.Amount.ALL);
            } else if (makingSuperCombat) {
                ctx.bank.withdraw(unfinishedPotionID, 7);
                ctx.bank.withdraw(2440, 7);
                ctx.bank.withdraw(2436, 7);
                ctx.bank.withdraw(2442, 7);
            } else {
                ctx.bank.withdraw(unfinishedPotionID, 14);
                ctx.bank.withdraw(secondIngrediente, 14);
            }
            ctx.onCondition(() -> ctx.inventory.populate().population() > 14, 3000);
            updateStatus("Closing bank");
            ctx.bank.closeBank();
            return;
        }

        if (!ctx.bank.bankOpen() && !ctx.players.getLocal().isAnimating()) {
            SimpleObject bankChest = getBankChest();
            if (bankChest != null) {
                updateStatus("Refilling supplies");
                bankChest.click(1);
                ctx.onCondition(() -> ctx.bank.bankOpen(), 5000);
            }
        }
    }

    private SimpleObject getBankChest() {
        SimpleObject bankChest = ctx.objects.populate().filter(BANK_NAME).nearest().next();
        if (bankChest != null && bankChest.distanceTo(ctx.players.getLocal()) <= 10 && bankChest.validateInteractable()) {
            return bankChest;
        }
        return null;
    }

    // Herblore

    private void herbTask() {
        SimpleItem unfPotionInv = ctx.inventory.populate().filter(unfinishedPotionID).next();
        SimpleItem secondIngredienteInv = ctx.inventory.populate().filter(secondIngrediente).next();
        boolean itemsNotNull = unfPotionInv != null || secondIngredienteInv != null;

        if (!makingStamingPotions) {
            if (ctx.players.getLocal().isAnimating()) {
                return;
            }
        }

        if (!itemsNotNull) {
            openingBank();
        } else {
            updateStatus("Making " + nameOfItem);
            ctx.inventory.itemOnItem(unfPotionInv, secondIngredienteInv);
            lastAnimation = System.currentTimeMillis();
        }
    }

    private void herbStaminaTask() {
        SimpleItem unfPotionInv = ctx.inventory.populate().filter(unfinishedPotionID).reverse().next();
        SimpleItem secondIngredienteInv = ctx.inventory.populate().filter(secondIngrediente).next();
        boolean itemsNotNull = unfPotionInv != null || secondIngredienteInv != null;

        if (!itemsNotNull) {
            openingBank();
        } else {
            if (!ctx.dialogue.dialogueOpen()) {
                updateStatus("Making " + nameOfItem);
                ctx.inventory.itemOnItem(unfPotionInv, secondIngredienteInv);
            } else {
                int SPACE_BUTTON = KeyEvent.VK_SPACE;
                ctx.keyboard.clickKey(SPACE_BUTTON);
                ctx.sleepCondition(() -> unfPotionInv == null, 30000);
            }
        }
    }

    private void herbSuperCombatsTask() {
        SimpleItem unfPotionInv = ctx.inventory.populate().filter(unfinishedPotionID).next();
        SimpleItem superStrenght = ctx.inventory.populate().filter(2440).next();
        SimpleItem superAttack = ctx.inventory.populate().filter(2436).next();
        SimpleItem superDefence = ctx.inventory.populate().filter(2442).next();
        boolean itemsNotNull = unfPotionInv != null && superStrenght != null && superAttack != null && superDefence != null;

        if (ctx.players.getLocal().isAnimating()) {
            return;
        }

        if (!itemsNotNull) {
            openingBank();
        } else {
            updateStatus("Making " + nameOfItem);
            ctx.inventory.itemOnItem(unfPotionInv, superStrenght);
            lastAnimation = System.currentTimeMillis();
        }
    }

    private void getTaskItem() {
        PotionItems item = PotionItems.values()[returnItem];
        nameOfItem = item.getNameOfItem();
        unfinishedPotionID = item.getUnfinishedPotionID();
        secondIngrediente = item.getSecondIngrediente();
    }

    //Utility
    public static String currentTime() {
        return LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm"));
    }

    private void updateStatus(String newStatus) {
        status = newStatus;
        ctx.updateStatus(status);
        System.out.println(status);
    }

    public String getPlayerName() {
        if (playerGameName == null) {
            playerGameName = ctx.players.getLocal().getName();
        }
        return playerGameName;
    }

    @Override
    public void onTerminate() {

        // Other vars
        this.startingSkillLevel = 0L;
        this.startingSkillExp = 0L;
        this.count = 0;
        secondIngrediente = 0;
        unfinishedPotionID = 0;
        makingSuperCombat = false;
        makingStamingPotions = false;
        gui.setVisible(false);

        this.ctx.updateStatus("-------------- " + currentTime() + " --------------");
        this.ctx.updateStatus("----------------------");
        this.ctx.updateStatus("Thank You & Good Luck!");
        this.ctx.updateStatus("----------------------");
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        ChatMessageType getType = m.getType();
        net.runelite.api.events.ChatMessage getEvent = m.getChatEvent();
        playerGameName = getPlayerName();

        if (m.getMessage() == null) {
            return;
        }

        if (getType == ChatMessageType.GAME) {
            String senderName = getEvent.getName();

            // Remove any text within angle brackets and trim
            senderName = senderName.replaceAll("<[^>]+>", "").trim();

            if (senderName.contains(playerGameName)) {
                ctx.updateStatus(currentTime() + " Someone asked for you");
                ctx.updateStatus(currentTime() + " Stopping script");
                ctx.stopScript();
            }

        }
    }

    @Override
    public int loopDuration() {
        return 150;
    }

    @Override
    public void paint(Graphics g) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(5, 120, 200, 110);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        // Get runtime and skill information
        long runTime = System.currentTimeMillis() - this.startTime;
        long currentSkillLevel = this.ctx.skills.realLevel(SimpleSkills.Skills.HERBLORE);
        long currentSkillExp = this.ctx.skills.experience(SimpleSkills.Skills.HERBLORE);
        long skillLevelsGained = currentSkillLevel - this.startingSkillLevel;
        long skillExpGained = currentSkillExp - this.startingSkillExp;

        // Calculate experience and actions per hour
        long skillExpPerHour = skillExpGained * 3600000L / runTime;
        long actionsPerHour = count * 3600000L / (System.currentTimeMillis() - this.startTime);

        // Set up colors
        Color philippineRed = new Color(196, 18, 48);
        Color raisinBlack = new Color(35, 31, 32, 127);

        // Draw paint if not hidden
        if (!hidePaint) {
            g.setColor(raisinBlack);
            g.fillRoundRect(5, 120, 200, 110, 20, 20);

            g.setColor(philippineRed);
            g.drawRoundRect(5, 120, 200, 110, 20, 20);

            g.setColor(philippineRed);
            g.drawString("eHerbloreBot by Esmaabi", 15, 135);
            g.setColor(Color.WHITE);
            g.drawString("Runtime: " + formatTime(runTime), 15, 150);
            g.drawString("Skill Level: " + this.startingSkillLevel + " (+" + skillLevelsGained + "), started at " + currentSkillLevel, 15, 165);
            g.drawString("Current Exp: " + currentSkillExp, 15, 180);
            g.drawString("Exp gained: " + skillExpGained + " (" + (skillExpPerHour / 1000L) + "k xp/h)", 15, 195);
            g.drawString("Potions made: " + count + " (" + actionsPerHour + " per/h)", 15, 210);
            g.drawString("Status: " + status, 15, 225);

        }
    }

    private String formatTime(long ms) {
        long s = ms / 1000L;
        long m = s / 60L;
        long h = m / 60L;
        s %= 60L;
        m %= 60L;
        h %= 24L;
        return String.format("%02d:%02d:%02d", h, m, s);
    }

}
'''
'''--- Battlescape/daRedwood/daMain.java ---
package daRedwood;

import java.awt.*;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.queries.SimpleEntityQuery;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.script.Script;

@ScriptManifest(author = "unix && alex", category = Category.WOODCUTTING, description = "Cuts Redwood, collects clues, bird eggs and banks it all", discord = "empty",
        name = "daRedwood Chopper", servers = { "Battlescape" }, version = "1.0")
public class daMain extends Script {
    public String status;
    public long startTime;
    public int startExperience, picked_items;
    private static final int[] BIRD_NEST = {5070, 5072, 5071};
    private static final int DEPOSIT_BOX = 25937;
    private static final int REDWOOD_ID = 29668;

    @Override
    public void onExecute() {
        System.out.println("Started daRedwood!");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        if (ctx.inventory.inventoryFull()) {
            SimpleObject bank = ctx.objects.populate().filter(DEPOSIT_BOX).nearest().next();
            if (bank == null) {
                return;
            }
            if (!ctx.bank.depositBoxOpen()) {
                status("Banking 1");
                bank.click("Deposit");
                ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
                return;
            } else if (ctx.inventory.inventoryFull()) {
                status("Banking 2");
                ctx.bank.depositInventory();
                ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
                return;
            }
        }

        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            status("Closing bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> !ctx.bank.depositBoxOpen(), 2500);
        }

        if (!ctx.groundItems.populate().filter(BIRD_NEST).isEmpty()) {
            status("Looting items");
            ctx.groundItems.nearest().next().click("Take");
            ctx.sleep(2000);
            return;
        } // picks up whatever u tell it to lol

        SimpleObject tree = ctx.objects.populate().filter(REDWOOD_ID).nearest().next();

        if (ctx.players.getLocal().getAnimation() == -1) {
            if (tree != null) {
                tree.click("Cut");
                status("Cutting daRedwood lol");
                ctx.sleep(2500);
            }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("falls out of the tree")) {
                picked_items++;
            }
        }
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;

        Font font = new Font("Arial", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font);
        g.setColor(Color.decode("#1C6497"));
        g.drawString("daRedwood    v. " + "1.0", 385, 286);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 385, 298);
        g.drawString("Status: " + status, 385, 308);
        int totalExp = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING) - startExperience;
        g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp/1000, startTime) + "k/Hour)", 385, 320);
        g.drawString("Bird Nests: " + ctx.paint.formatValue(picked_items) + " (" + ctx.paint.valuePerHour(picked_items, startTime) + " /Hour)", 385, 332);
    }
}
'''
'''--- Battlescape/daRobber/daRobberMain.java ---
package daRobber;

import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;

import java.awt.*;

@ScriptManifest(
        author = "alex",
        category = Category.THIEVING,
        description = "<html>"
                + "<p>Dumb master farmer thief for Battlescape</p>"
                + "<p><strong>Performs pickpockets</strong></p>"
                + "<ul>"
                + "<li>Start <strong>@ home at the master farmer place</strong>.</li>"
                + "<li><strong>Drops the useless shit and keeps the good shit</strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daRobber",
        servers = {"Battlescape"},
        version = "2.0"
)

public class daRobberMain extends Script {
    public String status;
    public long startTime;
    public int startExperience, times_stole;
    private static final int DA_VICTIM_ID = 3257;
    public int[] itemIds = {5306, 5281, 5324, 5318, 5322, 5096, 5319, 5308, 5101, 5305, 5309, 5329, 5307, 5320, 5282, 5280, 5098, 5102, 5310, 5099, 5318, 5311, 5104, 5322, 5099, 5103, 5105, 5106, 5291, 5292, 5293};

    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daRobber");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.THIEVING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {

        SimpleNpc pickpocket_ore = ctx.npcs.populate().filter(DA_VICTIM_ID).nearest().next();

        if (pickpocket_ore != null) {
            pickpocket_ore.click(0);
            status("Robbing");
        }

        if (ctx.inventory.inventoryFull()){
            for (int itemId : itemIds) {
                if (ctx.inventory.populate().filter(itemId).next() != null){
                    ctx.inventory.dropItem(ctx.inventory.populate().filter(itemId).next());
                }
            }
        }
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("ou pick the")) {
                times_stole++;
            }
        }
    }

    @Override
    public void onTerminate() {
        System.out.println("You stole this many times:");
        System.out.println(times_stole);
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.experience(SimpleSkills.Skills.THIEVING) - startExperience;
            g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp / 1000, startTime) + "k)", 380, 308);
            g.drawString("Pickpockets: " + ctx.paint.formatValue(times_stole) + " (" + ctx.paint.valuePerHour(times_stole, startTime) + ")", 380, 320);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daRobber  v. " + "2.0", 380, 274);
        }
    }
}
'''
'''--- Battlescape/daShopBuyer/daShopBuyerMain.java ---
package daShopBuyer;

import java.awt.*;
import java.util.Arrays;

import net.runelite.api.Actor;
import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimpleShop;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleNpc;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

@ScriptManifest(author = "alex", category = Category.UTILITY, description = "shop", discord = "empty",
        name = "daShop Buyer", servers = { "Battlescape" }, version = "1.0")
public class daShopBuyerMain extends Script {
    public WorldPoint p = new WorldPoint(0, 0, 0);
    @Override
    public void onExecute() {
        ctx.log("Started daShop Buyer");
    }

    @Override
    public void onProcess() {
        p = ctx.getClient().getLocalPlayer().getWorldLocation();
        SimpleNpc a = ctx.npcs.filter(121).nextNearest();
        int b = ctx.players.getLocal().getInteracting().getHealth();
        ctx.log(String.valueOf(b));
    }

    @Override
    public void onChatMessage(ChatMessage chatMessage) {

    }

    @Override
    public void onTerminate() {

    }

    @Override
    public void paint(Graphics graphics) {
        Graphics2D g = (Graphics2D) graphics;
        ctx.paint.drawTileMatrix(g, ctx.players.getLocal().getLocation(), Color.BLACK);
    }
}

'''
'''--- Battlescape/daTaskScript/Tasks/daBankTask.java ---
package daTaskScript.Tasks;

import simple.hooks.scripts.task.Task;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.api.ClientContext;
import daTaskScript.daTaskScriptMain;

public class daBankTask extends Task {
    public daBankTask(ClientContext ctx) {
        super(ctx);
    }

    @Override
    public boolean condition() {
        return ctx.inventory.inventoryFull();
    }

    @Override
    public void run() {
        SimpleObject bank = ctx.objects.populate().filter(25937).nearest().next();
        if (bank == null) {
            return;
        }
        if (!ctx.bank.depositBoxOpen()) {
            daTaskScriptMain.status("Open deposit box");
            bank.click(0);
            ctx.sleepCondition(() -> ctx.bank.depositBoxOpen(), 2500);
        } else if (ctx.inventory.inventoryFull()) {
            daTaskScriptMain.status("Banking 1");
            ctx.bank.depositInventory();
            ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
        }
        if (ctx.bank.depositBoxOpen() && !ctx.inventory.inventoryFull()) {
            daTaskScriptMain.status("Closing Bank");
            ctx.bank.closeBank();
            ctx.sleepCondition(() -> !ctx.bank.depositBoxOpen(), 2500);
        }
    }

    @Override
    public String status() {
        return "";
    }
}
'''
'''--- Battlescape/daTaskScript/Tasks/daChopTask.java ---
package daTaskScript.Tasks;

import daTaskScript.daTaskScriptMain;
import simple.hooks.scripts.task.Task;
import simple.hooks.wrappers.SimpleObject;
import simple.robot.api.ClientContext;

public class daChopTask extends Task {
    public daChopTask(ClientContext ctx) {
        super(ctx);
    }

    @Override
    public boolean condition() {
        return !ctx.inventory.inventoryFull();
    }

    @Override
    public void run() {

        if (ctx.players.getLocal().getAnimation() == -1) {
            SimpleObject tree = ctx.objects.populate().filter(29668).nextNearest();
            if (tree != null) {
                daTaskScriptMain.status("Cutting Redwood");
                tree.click("Cut");
                ctx.sleep(2500);
                }
        } else {
            ctx.sleepCondition(() -> ctx.players.getLocal().getAnimation() == -1, 2500);
        }
    }

    @Override
    public String status() {
        return "";
    }
}
'''
'''--- Battlescape/daTaskScript/daTaskScriptMain.java ---
package daTaskScript;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import daTaskScript.Tasks.daBankTask;
import daTaskScript.Tasks.daChopTask;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.scripts.task.TaskScript;
import simple.hooks.simplebot.ChatMessage;

@ScriptManifest(
        author = "alex",
        category = Category.WOODCUTTING,
        description = "<html>"
                + "<p>Basically daRedwood but task based</p>"
                + "<p><strong>Cuts redwood @ home in Battlescape</strong>.</p>"
                + "<ul>"
                + "<li><strong>Start @ da big redwood at home with the deposit box on ur screen</strong>.</li>"
                + "<li><strong>Have an axe equipped and dont worry about bird nests or logs, it picks up bird nests and bank em along with logs</strong>.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daRedwood2",
        servers = {"Battlescape"},
        version = "3.0"
)

public class daTaskScriptMain extends TaskScript {
    public static String status;
    public long startTime;
    public int startExperience, picked_items;
    private static final int[] BIRD_NEST = {5070, 5072, 5071};
    private static boolean hidePaint = false;
    private List tasks = new ArrayList();

    @Override
    public void onExecute() {
        tasks.addAll(Arrays.asList(new daBankTask(ctx), new daChopTask(ctx)));// Adds our tasks to our {task} list for execution
        System.out.println("Started daRedwood!");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public List tasks() {
        return tasks;// Tells our TaskScript these are the tasks we want executed
    }

    @Override
    public boolean prioritizeTasks() {
        return true;// Will prioritize tasks in order added in our {tasks} List
    }

    // This method is not needed as the TaskScript class will call it, itself
    @Override
    public void onProcess() {
        // Can add anything here before tasks have been ran
        super.onProcess();// Needed for the TaskScript to process the tasks
        //Can add anything here after tasks have been ran
        if (!ctx.groundItems.populate().filter(BIRD_NEST).isEmpty() && !ctx.inventory.inventoryFull()) {
            status("Looting items");
            ctx.groundItems.nearest().next().click("Take");
            ctx.sleep(2000);
        } // picks up whatever u tell it to lol
    }

    @Override
    public void onTerminate() {
    }

    public static void status(final String status) {
        daTaskScriptMain.status = status;
    }

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("falls out of the tree")) {
                picked_items++;
            }
        }
    }

    @Override
    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.experience(SimpleSkills.Skills.WOODCUTTING) - startExperience;
            g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp / 1000, startTime) + "k/Hour)", 385, 320);
            g.drawString("Bird Nests: " + ctx.paint.formatValue(picked_items) + " (" + ctx.paint.valuePerHour(picked_items, startTime) + " /Hour)", 385, 332);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daRedwood   v" + "3.0", 380, 274);
        }
    }
}
'''
'''--- Battlescape/daUnfinished/daMain.java ---
package daUnfinished;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

@ScriptManifest(
        author = "alex",
        category = Category.HERBLORE,
        description = "<html>"
                + "<p>Dumb rooncrafter for Battlescape</p>"
                + "<p><strong>makes roones</strong></p>"
                + "<ul>"
                + "<li><strong>Start @ the second bank chest at ::dz with the roone altar on ur screen</strong>.</li>"
                + "<li><strong>Have pure ess in ur bank lel</strong>.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daUNF",
        servers = {"Battlescape"},
        version = "2.0"
)

public class daMain extends Script {
    public String status;
    public long startTime;
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daUNF");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        status("unfinishing");
        SimpleItem ing1 = ctx.inventory.populate().filter(99).next();
        SimpleItem ing2 = ctx.inventory.populate().filter(231).next();

        if (ing1 == null || ing2 == null) {
            clickPreset();
        }

        if (ing1 != null && ing2 != null && !ctx.players.getLocal().isAnimating()) {
            ing1.click(0);
            ing2.click(0);
            if (ctx.dialogue.dialogueOpen()) {
                int SPACE_BUTTON = KeyEvent.VK_SPACE;
                ctx.keyboard.clickKey(SPACE_BUTTON);
            }
            ctx.sleepCondition(() -> ctx.players.getLocal().isAnimating(),500);
        }

    }

    @Override
    public void onChatMessage(ChatMessage m) {
    }

    @Override
    public void onTerminate() {
    }

    public void status(final String status) {
        this.status = status;
    }

    private void clickPreset() {
        status("preset moment");
        SimpleWidget preset = ctx.widgets.getWidget(702, 38);
        SimpleWidget questTab = ctx.widgets.getWidget(548, 50);
        SimpleWidget loadOuts = ctx.widgets.getWidget(702, 5);
        if (questTab != null && !questTab.isHidden()) {
            questTab.click(0);
            if (loadOuts != null && !loadOuts.isHidden()) {
                loadOuts.click(0);
                if (preset != null && !preset.isHidden()) {
                    preset.click(0);
                }
            }
        }
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daUNF maker  v. " + "2.0", 380, 274);
        }
    }
}
'''
'''--- RuneX/DZoneFisher/DZoneFisherGUI.java ---
package DZoneFisher;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class DZoneFisherGUI {
    private JComboBox<String> itemList;
    private JFrame frame;
    private JButton startStopButton;
    private boolean scriptStarted;
    public DZoneFisherGUI() {
        initialize();
    }
    //4375 afk patrol guard
    private void initialize() {
        frame = new JFrame("DZone Fisher GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);

        String[] options = {"Sharks", "Lobsters"};
        itemList = new JComboBox<>(options);
        itemList.setBounds(10, 60, 120, 20);
        frame.getContentPane().add(itemList);

        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });

        frame.setVisible(true);
    }

    public String getSelectedItem() {
        return (String) itemList.getSelectedItem();
    }

    public boolean isScriptStarted() {
        return scriptStarted;
    }

    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/DZoneFisher/DZoneFisherMain.java ---
package DZoneFisher;

import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;

@ScriptManifest(
        author = "alex",
        category = Category.FISHING,
        description = "<html>"
                + "<p><strong>DZone Fisher</strong>.</p>"
                + "<ul>"
                + "<li><strong>A simple af DZone fisher for you to use</strong>.</li>"
                + "<li><strong>ONLY supports SHARKS and LOBSTERS, please have your last withdrawn loudout to have the required tool, harpoon or a lobster cage</strong>.</li>"
                + "<li>Start this at ::dzone and have your last withdrawn loudout to whatever gear you want to be in when you fish.</li>"
                + "<li>This way the bot can use XP tokens and not have any problems with them.</li>"
                + "<li>This script features a cute, <strong>USELESS</strong>, gui which allows you to stop and start the script (the gui disappears after you stop the script).</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "DZone Fisher",
        servers = {"RuneX"},
        version = "1.0"
)

public class DZoneFisherMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private DZoneFisherGUI gui;
    private static boolean hidePaint = false;
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.FISHING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new DZoneFisherGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        String selectedItem = gui.getSelectedItem();
        SimpleNpc target = ctx.npcs.populate().filter(324).nextNearest();
        SimpleSceneObject bankchest = ctx.objects.populate().filter("Bank chest").nextNearest();
        if (gui != null && gui.isScriptStarted()) {
            if (ctx.inventory.inventoryFull()) {
                bankchest.interact(900);
                status("Deposit");
            }
            if (target != null && !ctx.inventory.inventoryFull() && ctx.players.getLocal().getInteracting() == null) {
                if ("Lobsters".equals(selectedItem)) {
                    target.interact(20);
                    status("Fishing Lobbies");
                } else if ("Sharks".equals(selectedItem)) {
                    target.interact(225);
                    status("Fishing Sharkies");
                }
            }
        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.getExperience(SimpleSkills.Skill.FISHING) - startExperience;
            g.drawString("XP Earned: " + ctx.paint.formatValue(totalExp), 380, 308);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("DZone Fisher  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/DZoneMiner/DZoneMinerGUI.java ---
package DZoneMiner;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class DZoneMinerGUI {
    private JComboBox<String> itemList;
    private JFrame frame;
    private JButton startStopButton;
    private boolean scriptStarted;
    public DZoneMinerGUI() {
        initialize();
    }
    //4375 afk patrol guard
    private void initialize() {
        frame = new JFrame("DZone Miner GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);

        String[] options = {"Coal", "Gold", "Mithril", "Adamantite", "Runite", "Amethyst"};
        itemList = new JComboBox<>(options);
        itemList.setBounds(10, 60, 120, 20);
        frame.getContentPane().add(itemList);

        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });

        frame.setVisible(true);
    }

    public String getSelectedItem() {
        return (String) itemList.getSelectedItem();
    }

    public boolean isScriptStarted() {
        return scriptStarted;
    }

    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/DZoneMiner/DZoneMinerMain.java ---
package DZoneMiner;

import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;

@ScriptManifest(
        author = "alex",
        category = Category.MINING,
        description = "<html>"
                + "<p><strong>DZone Miner</strong>.</p>"
                + "<ul>"
                + "<li><strong>A simple af DZone Miner for you to use</strong>.</li>"
                + "<li><strong>It supports all the ores available at ::dzone and AMETHYST at Max Guild, please have your last withdrawn loudout to have the required tool, a pickaxe</strong>.</li>"
                + "<li>Start this at ::dzone and have your last withdrawn loudout to whatever gear you want to be in when you fish.</li>"
                + "<li>This way the bot can use XP tokens and not have any problems with them.</li>"
                + "<li>This script features a cute, <strong>USELESS</strong>, gui which allows you to stop and start the script (the gui disappears after you stop the script).</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "DZone Miner",
        servers = {"RuneX"},
        version = "1.0"
)

public class DZoneMinerMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private DZoneMinerGUI gui;
    private static boolean hidePaint = false;
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.MINING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new DZoneMinerGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        String selectedItem = gui.getSelectedItem();
        SimpleSceneObject coal = ctx.objects.populate().filter(2097).nextNearest();
        SimpleSceneObject gold = ctx.objects.populate().filter(2099).nextNearest();
        SimpleSceneObject mith = ctx.objects.populate().filter(2102).nextNearest();
        SimpleSceneObject addy = ctx.objects.populate().filter(2105).nextNearest();
        SimpleSceneObject rune = ctx.objects.populate().filter(2107).nextNearest();
        SimpleSceneObject amethyst = ctx.objects.populate().filter(3042).nextNearest();
        SimpleSceneObject bankchest = ctx.objects.populate().filter("Bank chest").nextNearest();
        SimpleNpc banker = ctx.npcs.populate().filter("Banker").nextNearest();
        if (gui != null && gui.isScriptStarted()) {
            if (ctx.inventory.inventoryFull()) {
                if (bankchest != null) {
                    bankchest.interact(900);
                } else if (banker != null) {
                    banker.interact(225);
                }
                status("Deposit");
            }
            if (!ctx.inventory.inventoryFull() && ctx.players.getLocal().getAnimation() == -1) {
                if (coal != null && "Coal".equals(selectedItem)) {
                    coal.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Mining Coal");
                }
                if (gold != null && "Gold".equals(selectedItem)) {
                    gold.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Mining Gold");
                }
                if (mith != null && "Mithril".equals(selectedItem)) {
                    mith.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Mining Mithril");
                }
                if (addy != null && "Adamantite".equals(selectedItem)) {
                    addy.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Mining Adamantite");
                }
                if (rune != null && "Runite".equals(selectedItem)) {
                    rune.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Mining Runite");
                }
                if (amethyst != null && "Amethyst".equals(selectedItem)) {
                    amethyst.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Mining Amethyst");
                }
            }
        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.getExperience(SimpleSkills.Skill.MINING) - startExperience;
            g.drawString("XP Earned: " + ctx.paint.formatValue(totalExp), 380, 308);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("DZone Miner  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/ElfStealer/ElfStealerGUI.java ---
package ElfStealer;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ElfStealerGUI {

    private JFrame frame;
    private JButton startStopButton;
    private boolean scriptStarted;

    public ElfStealerGUI() {
        initialize();
    }

    //4375 afk patrol guard

    private void initialize() {
        frame = new JFrame("Elf Stealer GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);

        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    // If the script is already running, stop it
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    // If the script is not running, start it
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });

        frame.setVisible(true);
    }

    public boolean isScriptStarted() {
        return scriptStarted;
    }

    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/ElfStealer/ElfStealerMain.java ---
package ElfStealer;

import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;

@ScriptManifest(
        author = "alex",
        category = Category.THIEVING,
        description = "<html>"
                + "<p><strong>Elf Pickpocket</strong>.</p>"
                + "<ul>"
                + "<li><strong>A simple af Elf pickpocket to use to do your daily thieving quest with</strong>.</li>"
                + "<li>Start this at the Elves at ::dzone and have your last withdrawn loudout to whatever gear you want to be in when you pickpocket them Elves.</li>"
                + "<li>This way the bot can use XP tokens and not have any problems with them.</li>"
                + "<li>This script features a cute, <strong>USELESS</strong>, gui which allows you to stop and start the script (the gui disappears after you stop the script).</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "Elf Pickpocket",
        servers = {"RuneX"},
        version = "1.0"
)

public class ElfStealerMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private ElfStealerGUI gui;
    private static boolean hidePaint = false;
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        System.out.println("Started Elf Pickpocket");
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.THIEVING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new ElfStealerGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        SimpleNpc target = ctx.npcs.populate().filter("Elf").nextNearest();
        SimpleSceneObject bankchest = ctx.objects.populate().filter("Bank chest").nextNearest();
        if (gui != null && gui.isScriptStarted()) {
            if (ctx.inventory.inventoryFull()) {
                bankchest.interact(900);
                status("Deposit");
            }
            if (target != null && !ctx.inventory.inventoryFull()) {
                target.interact(20);
                status("Pickpocketing");
                ctx.sleep(250);
            }
        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.getExperience(SimpleSkills.Skill.THIEVING) - startExperience;
            g.drawString("XP Earned: " + ctx.paint.formatValue(totalExp), 380, 308);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("Elf Pickpocket  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/Figher/FigherMain.java ---
package Figher;

import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimplePrayers;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.filters.SimpleSkills;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;

import java.awt.*;
import java.util.regex.Pattern;
import java.awt.Graphics;
import java.awt.Graphics2D;

@ScriptManifest(
        author = "alex",
        category = Category.COMBAT,
        description = "<html>"
                + "<p><strong>Helps you do slayer</strong>.</p>"
                + "<ul>"
                + "<li><strong>Start whenever you want, it does actions only when it needs to</strong>.</li>"
                + "<li><strong>It drinks prayer pots and collects items for you</strong>.</li>"
                + "<li><strong>It picks up clues, ckey pieces,barrows amulets, dark totem pieces, ancient sharks, brim keys and some valuable items</strong>.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "Figher",
        servers = {"RuneX"},
        version = "1.0"
)

public class FigherMain extends Script implements SimpleMessageListener, SimplePaintable {
    public String status;
    public long startTime;
    private static final int[] DESIRED_ITEMS = {405};

    public int targetID = 1265;

    @Override
    public boolean onExecute() {
        System.out.println("Started daSlayerHelper");
        this.startTime = System.currentTimeMillis();
        return true;
    }

    @Override
    public void onProcess() {
        SimplePrayers prayers = new SimplePrayers(ctx);
        SimpleGroundItem items = ctx.groundItems.populate().filter(DESIRED_ITEMS).nearest().next();

        if (!ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty()) {
            status("Looting items");
            items.interact("Take");
            ctx.sleepCondition(() -> !ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty(), 1000);
        } // picks up whatever u tell it to lol

        if (prayers.points() <= 30){
            final SimpleItem potion = ctx.inventory.populate().filter(Pattern.compile("Prayer potion\\(\\d+\\)")).next();
            final int cached = ctx.prayers.points();
            status("Drinking Prayer Potion");
            if (potion != null && potion.interact(0)) {
                ctx.onCondition(() -> ctx.prayers.points() > cached, 250, 12);
            }
        } // da pray point check and use pot

        if (ctx.players.getLocal().getInteracting() == null) {
            SimpleNpc target = ctx.npcs.populate().filter(targetID).nextNearest();
            if (target != null && ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty()) {
                target.interact("Attack");
            }
        }
        status("Attacking shit");
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void onChatMessage(ChatMessageEvent m) {
    }

    public void status(final String status) {
        this.status = status;
    }

    @Override
    public void onPaint(Graphics2D g1) {
        Graphics2D g = (Graphics2D) g1;

        g.setColor(Color.DARK_GRAY);
        g.fillRect(368, 260, 150, 75);
        g.setColor(Color.BLACK);
        g.drawRect(368, 260, 150, 75);
        //g.fillRect(0, 338, 519, 165); //perfect black chat box

        Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
        g.setFont(font1);
        g.setColor(Color.GRAY);
        g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
        g.drawString("Status: " + status, 380, 298);
        Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
        g.setFont(font2);
        g.setColor(Color.WHITE);
        g.drawString("Figher  v. " + "2.0", 380, 274);
    }
}

'''
'''--- RuneX/ImpingHelper/ImpMain.java ---
package ImpingHelper;

import simple.api.coords.WorldPoint;
import simple.api.events.ChatMessageEvent;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.SimpleActor;
import simple.api.wrappers.SimpleNpc;
import simple.bot.internal.INpc;

import java.awt.*;

@ScriptManifest(
        author = "alex",
        category = Category.UTILITY,
        description = "<html>"
                + "<p><strong>Kills crabs</strong>.</p>"
                + "<ul>"
                + "<li><strong>Start at the crab zone with gear on you</strong>.</li>"
                + "<li><strong>This only works if youre strong enough to not die fighting crabs</strong>.</li>"
                + "<li><strong>It picks up caskets, oysters and it opens the unnoted caskets</strong>.</li>"
                + "<li>Sadly it will pick up everyones caskets and it does steal crabs from others.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "ShadeKiller",
        servers = {"RuneX"},
        version = "1.0"
)
public class ImpMain extends Script implements SimpleMessageListener, SimplePaintable {
    private WorldPoint ninjaLoc;

    @Override
    public boolean onExecute() {
        return true;
    }

    @Override
    public void onTerminate() {

    }

    @Override
    public void onProcess() {
        SimpleNpc ninja = ctx.npcs.populate().filter("Ninja impling", "Lucky impling", "Dragon impling", "Lucky impling", "Cursed impling").nextNearest();
        if (ninja != null) {
            ninjaLoc = ninja.getLocation();
        }
    }

    @Override
    public void onPaint(Graphics2D g1) {
        Graphics2D g = (Graphics2D) g1;
        if (ninjaLoc != null) {
            ctx.paint.drawTileMatrix(g, ninjaLoc, "penis");
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);
        }
    }

    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {

    }
}

'''
'''--- RuneX/Killer/KillerGUI.java ---
package Killer;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

public class KillerGUI {
    private JFrame frame;
    private JButton startStopButton;
    private JCheckBox enableOpenCCheckbox; // Added checkbox
    private boolean scriptStarted;
    private boolean openCEnabled; // Added variable for the feature state
    public KillerGUI() {
        initialize();
    }
    private void initialize() {
        frame = new JFrame("Killer GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);
        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);
        enableOpenCCheckbox = new JCheckBox("Open the caskets?");
        enableOpenCCheckbox.setBounds(100, 120, 150, 20);
        frame.getContentPane().add(enableOpenCCheckbox);
        enableOpenCCheckbox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    openCEnabled = true;
                } else {
                    openCEnabled = false;
                }
            }
        });
        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    // If the script is already running, stop it
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    // If the script is not running, start it
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });
        frame.setVisible(true);
    }
    public boolean isScriptStarted() {
        return scriptStarted;
    }
    public boolean OpenCEnabled() {
        return openCEnabled;
    }
    public JButton getStartButton() {
        return startStopButton;
    }
    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/Killer/KillerMain.java ---
package Killer;

import simple.api.actions.SimpleItemActions;
import simple.api.events.ChatMessageEvent;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;

@ScriptManifest(
        author = "alex",
        category = Category.COMBAT,
        description = "<html>"
                + "<p><strong>Kills crabs and experiments</strong>.</p>"
                + "<ul>"
                + "<li><strong>Start at the crab zone or the experiments zone with gear on you</strong>.</li>"
                + "<li><strong>This only works if youre strong enough to not die fighting crabs or experiments</strong>.</li>"
                + "<li><strong>It picks up caskets, oysters and it opens the unnoted caskets</strong>.</li>"
                + "<li>Sadly it will pick up everyones caskets and it does steal npcs from others.</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "Crab&ExperimentsKiller",
        servers = {"RuneX"},
        version = "2.0"
)

public class KillerMain extends Script implements SimpleMessageListener, SimplePaintable {
    public String status;
    public long startTime;
    private KillerGUI gui;
    private static boolean hidePaint = false;
    private static final int[] DESIRED_ITEMS = {405, 406, 407};
    private static final int[] OPEN_ITEMS = {405, 407};
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new KillerGUI();
            }
        });
        return true;
    }
    @Override
    public void onProcess() {
        boolean openCEnabled = gui.OpenCEnabled();
        SimpleGroundItem items = ctx.groundItems.populate().filter(DESIRED_ITEMS).nearest().next();
        SimpleItem casket = ctx.inventory.populate().filter(OPEN_ITEMS).next();
        if (gui != null && gui.isScriptStarted()) {
            if (!ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty()) {
                status("Looting items");
                items.interact("Take");
                ctx.sleepCondition(() -> !ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty(), 1000);
            }
            if (casket != null & openCEnabled) {
                status("Opening stuff");
                casket.interact(SimpleItemActions.CONSUME);
                ctx.sleepCondition(() -> !ctx.inventory.contains(casket), 1000);
            }
            if (ctx.players.getLocal().getInteracting() == null) {
                SimpleNpc target = ctx.npcs.populate().filter("Rock Crab", "Experiment").nextNearest();
                if (target != null && ctx.groundItems.populate().filter(DESIRED_ITEMS).isEmpty()) {
                    target.interact("Attack");
                }
            }
            status("Attacking shit");
        }
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onChatMessage(ChatMessageEvent m) {}
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);
            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("Killer  v. " + "2.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/KrakenKiller/KrakenKillerGUI.java ---
package KrakenKiller;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class KrakenKillerGUI {
    private JFrame frame;
    private JComboBox<String> List1;
    private JComboBox<String> List2;
    private JButton startStopButton;
    private JLabel helloLabel;
    private boolean scriptStarted;

    public KrakenKillerGUI() {
        initialize();
    }
    private void initialize() {
        frame = new JFrame();
        frame.setResizable(false);
        frame.setTitle("Kraken Killer GUI");
        frame.setBounds(100, 100, 350, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        String[] options = {"Normal", "Curses", "Curses - SoulSplit"};
        List1 = new JComboBox<>(options);
        List1.setBounds(190, 20, 120, 25);
        frame.getContentPane().add(List1);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(120, 120, 120, 25);
        frame.getContentPane().add(startStopButton);

        helloLabel = new JLabel("Choose your PrayerBook");
        helloLabel.setBounds(10, 20, 150, 25);
        helloLabel.setFont(new Font("Arial", Font.BOLD, 12));
        frame.getContentPane().add(helloLabel);

        helloLabel = new JLabel("Choose what to boost");
        helloLabel.setBounds(10, 50, 150, 25);
        helloLabel.setFont(new Font("Arial", Font.BOLD, 12));
        frame.getContentPane().add(helloLabel);

        String[] options2 = {"None", "Eagle Eye", "Rigour", "Mystic Might", "Augury", "Leech Magic", "Leech Range", "Turmoil"};
        List2 = new JComboBox<>(options2);
        List2.setBounds(190, 50, 120, 25);
        frame.getContentPane().add(List2);

        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });
        frame.setVisible(true);
    }
    public String getSelectedItem1() {
        return (String) List1.getSelectedItem();
    }

    public String getSelectedItem2() {
        return (String) List2.getSelectedItem();
    }

    public boolean isScriptStarted() {
        return scriptStarted;
    }

    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/KrakenKiller/KrakenKillerMain.java ---
package KrakenKiller;

import simple.api.coords.WorldArea;
import simple.api.coords.WorldPoint;
import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimplePlayers;
import simple.api.filters.SimplePrayers;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;
import java.util.Arrays;
import java.util.regex.Pattern;

@ScriptManifest(
        author = "alex",
        category = Category.MONEYMAKING,
        description = "<html>"
                + "<p><strong>Kraken Killer</strong>.</p>"
                + "<ul>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "Kraken Killer but Better",
        servers = {"RuneX"},
        version = "1.0"
)

public class KrakenKillerMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private KrakenKillerGUI gui;
    private static boolean hidePaint = false;
    public static final WorldArea HOME = new WorldArea(
            new WorldPoint(3086, 3482, 0),
            new WorldPoint(3097, 3498, 0));
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.MINING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new KrakenKillerGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        SimplePrayers prayers = new SimplePrayers(ctx);
        String selectedItem1 = gui.getSelectedItem1();
        String selectedItem2 = gui.getSelectedItem2();
        SimpleNpc Kraken = ctx.npcs.populate().filter("Kraken").nextNearest();
        SimpleItem potion = ctx.inventory.populate().filter(Pattern.compile("Super restore\\(\\d+\\)"), Pattern.compile("Prayer potion\\(\\d+\\)"), Pattern.compile("Sanfew serum\\(\\d+\\)"), Pattern.compile("Prayer flask\\(\\d+\\)"), Pattern.compile("Sanfew flask\\(\\d+\\)")).next();
        SimpleSceneObject bank = ctx.objects.populate().filter("Bank Chest", "Bank Booth").nextNearest();
        if (gui != null && gui.isScriptStarted()) {
            if (prayers.points() <= 30) {
                final int cached = ctx.prayers.points();
                status("Drinkin Potion");
                if (potion != null && potion.interact(74)) {
                    ctx.onCondition(() -> ctx.prayers.points() > cached, 250, 12);
                }
            }
            if (ctx.inventory.inventoryFull() || potion == null) {
                if (!ctx.players.getLocal().within(HOME)){
                    ctx.menuActions.sendAction(646, 0, 0, 30000, 0);
                } else if (bank != null) {
                    bank.interact(900);
                    status("Restock");
                }
            }
            if (ctx.players.getLocal().within(HOME) && potion != null) {
                //ctx.menuActions.sendAction(315,0,0,60448,0);
                status("goin bacc");
            }
            if ("Normal".equals(selectedItem1) && !prayers.prayerActive(SimplePrayers.Prayers.PROTECT_FROM_MAGIC)) {
                prayers.prayer(SimplePrayers.Prayers.PROTECT_FROM_MAGIC, true);
                if ("Eagle Eye".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.EAGLE_EYE, true);
                }
                if ("Rigour".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.RIGOUR, true);
                }
                if ("Mystic Might".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.MYSTIC_MIGHT, true);
                }
                if ("Augury".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.AUGURY, true);
                }
            } else if ("Curses".equals(selectedItem1) && !prayers.prayerActive(SimplePrayers.Prayers.DEFLECT_MAGIC)) {
                prayers.prayer(SimplePrayers.Prayers.DEFLECT_MAGIC, true);
                if ("Leech Magic".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.LEECH_MAGIC, true);
                }
                if ("Leech Range".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.LEECH_RANGE, true);
                }
                if ("Turmoil".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.TURMOIL, true);
                }
            } else if ("Curses - SoulSplit".equals(selectedItem1) && !prayers.prayerActive(SimplePrayers.Prayers.SOUL_SPLIT)) {
                prayers.prayer(SimplePrayers.Prayers.SOUL_SPLIT);
                if ("Leech Magic".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.LEECH_MAGIC, true);
                }
                if ("Leech Range".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.LEECH_RANGE, true);
                }
                if ("Turmoil".equals(selectedItem2)) {
                    prayers.prayer(SimplePrayers.Prayers.TURMOIL, true);
                }
            }
            if (Kraken != null && Kraken.getInteracting() != null && Kraken.getInteracting().equals(ctx.players.getLocal()) && ctx.players.getLocal().getInteracting() == null) {
                Kraken.interact(412);
                status("attacking");
            }
        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("KrakenKiller  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/LogBonfire/LogBonfireGUI.java ---
package LogBonfire;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LogBonfireGUI {
    private JComboBox<String> itemList;
    private JFrame frame;
    private JButton startStopButton;
    private boolean scriptStarted;
    public LogBonfireGUI() {
        initialize();
    }
    private void initialize() {
        frame = new JFrame("ShadeKiller GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);

        String[] options = {"Coal", "Gold", "Mithril", "Adamantite", "Runite", "Amethyst"};
        itemList = new JComboBox<>(options);
        itemList.setBounds(10, 60, 120, 20);
        frame.getContentPane().add(itemList);

        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });

        frame.setVisible(true);
    }

    public String getSelectedItem() {
        return (String) itemList.getSelectedItem();
    }

    public boolean isScriptStarted() {
        return scriptStarted;
    }

    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/LogBonfire/LogBonfireMain.java ---
package LogBonfire;

import simple.api.coords.WorldArea;
import simple.api.coords.WorldPoint;
import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimplePrayers;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.util.regex.Pattern;

@ScriptManifest(
        author = "alex",
        category = Category.FIREMAKING,
        description = "<html>"
                + "<p><strong>Log To Bonfire</strong>.</p>"
                + "<ul>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "LogBonfire",
        servers = {"RuneX"},
        version = "1.0"
)

public class LogBonfireMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private LogBonfireGUI gui;
    private static boolean hidePaint = false;
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.MINING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new LogBonfireGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        int SPACE_BUTTON = KeyEvent.VK_SPACE;
        String selectedItem = gui.getSelectedItem();
        SimpleSceneObject bank = ctx.objects.populate().filter("Bank Chest", "Bank Booth").nextNearest();
        SimpleSceneObject bonfire = ctx.objects.populate().filter(5249).nextNearest();
        SimpleItem log = ctx.inventory.populate().filter("Logs", "Oak logs", "Willow logs", "Maple logs", "Yew logs", "Magic logs", "Redwood logs").next();
        if (gui != null && gui.isScriptStarted()) {
            if (log == null) {
                bank.interact(900);
                status("restock");
            }
            if (log != null && bonfire != null){
                log.interact(447);
                bonfire.interact(62);
                status("interact");
                //ctx.onCondition(() -> !ctx.dialogue.dialogueOpen(), 250, 12);
            }
            if (ctx.dialogue.dialogueOpen() && !ctx.players.getLocal().isAnimating()) {
                ctx.keyboard.clickKey(SPACE_BUTTON);
                //ctx.onCondition(() -> !ctx.players.getLocal().isAnimating(), 250, 12);
                status("bruh");
            }

        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);
            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.getExperience(SimpleSkills.Skill.FIREMAKING) - startExperience;
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("LogBonfire  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/ShadeKiller/ShadeKillerGUI.java ---
package ShadeKiller;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ShadeKillerGUI {
    private JComboBox<String> itemList;
    private JFrame frame;
    private JButton startStopButton;
    private boolean scriptStarted;
    public ShadeKillerGUI() {
        initialize();
    }
    private void initialize() {
        frame = new JFrame("ShadeKiller GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);

        String[] options = {"Coal", "Gold", "Mithril", "Adamantite", "Runite", "Amethyst"};
        itemList = new JComboBox<>(options);
        itemList.setBounds(10, 60, 120, 20);
        frame.getContentPane().add(itemList);

        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });
        frame.setVisible(true);
    }

    public String getSelectedItem() {
        return (String) itemList.getSelectedItem();
    }

    public boolean isScriptStarted() {
        return scriptStarted;
    }

    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/ShadeKiller/ShadeKillerMain.java ---
package ShadeKiller;

import simple.api.coords.WorldArea;
import simple.api.coords.WorldPoint;
import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimplePrayers;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;
import java.util.regex.Pattern;

@ScriptManifest(
        author = "alex",
        category = Category.MONEYMAKING,
        description = "<html>"
                + "<p><strong>Shade Killer</strong>.</p>"
                + "<ul>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "Shade Killer",
        servers = {"RuneX"},
        version = "1.0"
)

public class ShadeKillerMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private ShadeKillerGUI gui;
    private static boolean hidePaint = false;
    public static final WorldArea HOME = new WorldArea(
            new WorldPoint(3086, 3482, 0),
            new WorldPoint(3097, 3498, 0));
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.MINING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new ShadeKillerGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        SimplePrayers prayers = new SimplePrayers(ctx);
        String selectedItem = gui.getSelectedItem();
        SimpleItem potion = ctx.inventory.populate().filter(Pattern.compile("Super restore\\(\\d+\\)"), Pattern.compile("Prayer potion\\(\\d+\\)"), Pattern.compile("Sanfew serum\\(\\d+\\)"), Pattern.compile("Prayer flask\\(\\d+\\)"), Pattern.compile("Sanfew flask\\(\\d+\\)")).next();
        SimpleSceneObject bank = ctx.objects.populate().filter("Bank Chest", "Bank Booth").nextNearest();
        if (gui != null && gui.isScriptStarted()) {
            if (prayers.points() <= 30) {
                final int cached = ctx.prayers.points();
                status("Drinking Prayer Potion");
                if (potion != null && potion.interact(74)) {
                    ctx.onCondition(() -> ctx.prayers.points() > cached, 250, 12);
                }
            }
            if (ctx.inventory.inventoryFull() || potion == null) {
                if (!ctx.players.getLocal().within(HOME)){
                    ctx.menuActions.sendAction(646, 0, 0, 30000, 0);
                } else if (bank != null) {
                    bank.interact(900);
                    status("Restock");
                }
            }
            if (ctx.players.getLocal().within(HOME) && potion != null) {
                ctx.menuActions.sendAction(315,0,0,55012,0);
                status("goin bacc");
            }

            if (!ctx.inventory.inventoryFull() && ctx.players.getLocal().getAnimation() == -1) {
                status("attackin");
            }
        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);
            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("ShadeKiller  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- RuneX/TeakNMahoganyCutter/TeakNMahoganyCutterGUI.java ---
package TeakNMahoganyCutter;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TeakNMahoganyCutterGUI {
    private JComboBox<String> itemList;
    private JFrame frame;
    private JButton startStopButton;
    private boolean scriptStarted;
    public TeakNMahoganyCutterGUI() {
        initialize();
    }
    private void initialize() {
        frame = new JFrame("TeakNMahogany Cutter GUI");
        frame.setBounds(100, 100, 300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        startStopButton = new JButton("Start Script");
        startStopButton.setBounds(100, 80, 120, 30);
        frame.getContentPane().add(startStopButton);
        String[] options = {"Teak", "Mahogany"};
        itemList = new JComboBox<>(options);
        itemList.setBounds(10, 60, 120, 20);
        frame.getContentPane().add(itemList);
        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (scriptStarted) {
                    scriptStarted = false;
                    startStopButton.setText("Start Script");
                } else {
                    scriptStarted = true;
                    startStopButton.setText("Stop Script");
                }
            }
        });
        frame.setVisible(true);
    }
    public String getSelectedItem() {
        return (String) itemList.getSelectedItem();
    }
    public boolean isScriptStarted() {
        return scriptStarted;
    }
    public void onCloseGUI() {
        frame.dispose();
    }
}

'''
'''--- RuneX/TeakNMahoganyCutter/TeakNMahoganyCutterMain.java ---
package TeakNMahoganyCutter;

import simple.api.events.ChatMessageEvent;
import simple.api.filters.SimpleSkills;
import simple.api.listeners.SimpleMessageListener;
import simple.api.script.Category;
import simple.api.script.Script;
import simple.api.script.ScriptManifest;
import simple.api.script.interfaces.SimplePaintable;
import simple.api.wrappers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;

@ScriptManifest(
        author = "alex",
        category = Category.WOODCUTTING,
        description = "<html>"
                + "<p><strong>TeakNMahogany Cutter</strong>.</p>"
                + "<ul>"
                + "<li><strong>YOU MUST HAVE A DONATOR RANK FOR THIS SCRIPT TO WORK!!! IT USES THE PREMIUM BANKER!!!</strong></li>"
                + "<li><strong>A simple af Teak & Mahogany cutter for you to use</strong>.</li>"
                + "<li><strong>It supports Teak & Mahogany trees that are at Hardwood Groove please have your last withdrawn loudout to have the required tool, an axe</strong>.</li>"
                + "<li>Start this at the Hardwood Groove (woodcutting teles) and have your last withdrawn loudout to whatever gear you want to be in when you fish.</li>"
                + "<li>This way the bot can use XP tokens and not have any problems with them.</li>"
                + "<li>This script features a cute, <strong>USELESS</strong>, gui which allows you to stop and start the script (the gui disappears after you stop the script).</li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "TeakNMahogany Cutter",
        servers = {"RuneX"},
        version = "1.0"
)

public class TeakNMahoganyCutterMain extends Script implements SimpleMessageListener, SimplePaintable {
    public long startTime;
    public String status;
    public int startExperience;
    private TeakNMahoganyCutterGUI gui;
    private static boolean hidePaint = false;
    @Override
    public void onChatMessage(ChatMessageEvent chatMessageEvent) {
    }
    @Override
    public boolean onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startExperience = ctx.skills.getExperience(SimpleSkills.Skill.WOODCUTTING);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new TeakNMahoganyCutterGUI();
            }
        });
        return true;
    }
    @Override
    public void onTerminate() {
        if (gui != null) {
            gui.onCloseGUI();
        }
    }
    @Override
    public void onProcess() {
        String selectedItem = gui.getSelectedItem();
        SimpleSceneObject teak = ctx.objects.populate().filter(9036).nextNearest();
        SimpleSceneObject maho = ctx.objects.populate().filter(9034).nextNearest();
        SimpleNpc banker = ctx.npcs.populate().filter(4519).nextNearest();
        if (gui != null && gui.isScriptStarted()) {
            if (ctx.inventory.inventoryFull()) {
                banker.interact(225);
                status("Deposit");
            }
            if (!ctx.inventory.inventoryFull() && ctx.players.getLocal().getAnimation() == -1) {
                if (teak != null && "Teak".equals(selectedItem)) {
                    teak.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Cutting Teak");
                }
                if (maho != null && "Mahogany".equals(selectedItem)) {
                    maho.interact(502);
                    ctx.onCondition(() -> ctx.players.getLocal().getInteracting() != null, 250, 6);
                    status("Cutting Mahogany");
                }
            }
        }
    }
    public void status(final String status) {
        this.status = status;
    }
    @Override
    public void onPaint(Graphics2D g1) {
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }
        Graphics2D g = (Graphics2D) g1;
        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10);
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.getExperience(SimpleSkills.Skill.WOODCUTTING) - startExperience;
            g.drawString("XP Earned: " + ctx.paint.formatValue(totalExp), 380, 308);
            Font font2 = new Font("Karla", Font.BOLD, 12);
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("TeakNMaho Cutter  v. " + "1.0", 380, 274);
        }
    }
}

'''
'''--- Zaros/daDemonix/daDemonixMain.java ---
package daDemonix;

import net.runelite.api.HeadIcon;
import net.runelite.api.coords.WorldPoint;
import simple.hooks.filters.SimplePrayers;
import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.LoopingScript;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;

import java.awt.*;

@ScriptManifest(author = "alex", category = Category.COMBAT, description = "<br>1<br><br>2<br><br>3<br>~ AIO4 ~<br>5<br>6<br>7<br><br>8", discord = "", name = "daDemonix", servers = {
        "Zaros" }, version = "0.1")

public class daDemonixMain extends Script implements LoopingScript {
    @Override
    public void onExecute() {
    }

    @Override
    public void onProcess() {

        SimplePrayers prayers = new SimplePrayers(ctx);
        SimpleNpc DEMONIC = ctx.npcs.populate().filter("Demonic gorilla").nextNearest();

        int[] FoodIds = {391, 385, 379, 7946, 13441, 373, 3144, 11936};
        int[] PPotsIds = {143, 3030, 141, 3028, 139, 3026, 2434, 3024};
        int[] meleeGearIDs = {13239, 19675, 20366, 11665};
        int[] rangeGearIDs = {13237, 9185, 22249, 11664};
        SimpleItem food = ctx.inventory.populate().filter(FoodIds).next();
        SimpleItem ppots = ctx.inventory.populate().filter(PPotsIds).next();

        int RANGE_ANIM = 7227;
        int MELEE_ANIM = 7226;
        int MAGIC_ANIM = 7238;
        int BOULDER_ANIM = 7228;

        if (ctx.players.getLocal().getHealth() <= 30 && food != null) {
            food.click(0);
        }

        if (prayers.points() <= 30 && ppots != null) {
            ppots.click(0);
        }

        if (DEMONIC != null) {
            if (ctx.getClient().getLocalPlayer().getInteracting() != null && DEMONIC.getInteracting().equals(ctx.getClient().getLocalPlayer())) {
                if (ctx.getClient().getLocalPlayer().getInteracting().getAnimation() == BOULDER_ANIM) {
                    WorldPoint playerLocation = ctx.players.getLocal().getLocation();
                    int xOffset = 0;
                    int yOffset = 1;

                    int newX = playerLocation.getX() + xOffset;
                    int newY = playerLocation.getY() + yOffset;

                    ctx.pathing.step(newX, newY);
                    if (!ctx.pathing.reachable(new WorldPoint(newX, newY, playerLocation.getPlane()))){
                        ctx.pathing.step(newX, playerLocation.getY());
                    } else {
                        ctx.pathing.step(playerLocation.getX(), newY);
                    }
                    ctx.log("moved");
                }
               if (DEMONIC.getOverhead().equals(HeadIcon.MELEE)) {
                   //it protects melee, attack range
                   for (int gearID : rangeGearIDs) {
                       SimpleItem rangeGear = ctx.inventory.populate().filter(gearID).next();
                       if (rangeGear != null) {
                           rangeGear.click(0);
                           ctx.sleep(50, 150); // Optional: Add a delay after clicking the item
                       }
                   }
               } else if (DEMONIC.getOverhead().equals(HeadIcon.RANGED)) {
                   //it protects range, attack melee
                   for (int gearID2 : meleeGearIDs) {
                       SimpleItem meleeGear = ctx.inventory.populate().filter(gearID2).next();
                       if (meleeGear != null) {
                           meleeGear.click(0);
                           ctx.sleep(50, 150);
                       }
                   }
               }

               if (DEMONIC.getAnimation() == RANGE_ANIM) {
                   if (!ctx.prayers.prayerActive(SimplePrayers.Prayers.PROTECT_FROM_MISSILES)) {
                       ctx.prayers.prayer(SimplePrayers.Prayers.PROTECT_FROM_MISSILES, true);
                       ctx.log("prayin range");
                   }//pray range
               } else if (DEMONIC.getAnimation() == MELEE_ANIM) {
                   if (!ctx.prayers.prayerActive(SimplePrayers.Prayers.PROTECT_FROM_MELEE)) {
                       ctx.prayers.prayer(SimplePrayers.Prayers.PROTECT_FROM_MELEE, true);
                       ctx.log("prayin melee");
                   }//pray melee
               } else if (DEMONIC.getAnimation() == MAGIC_ANIM) {
                   if (!ctx.prayers.prayerActive(SimplePrayers.Prayers.PROTECT_FROM_MAGIC)) {
                       ctx.prayers.prayer(SimplePrayers.Prayers.PROTECT_FROM_MAGIC, true);
                       ctx.log("prayin mage");
                   }//pray mage
               }
            }
        }
    }

    @Override
    public void onChatMessage(ChatMessage msg) {
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void paint(Graphics Graphs) {

    }

    @Override
    public int loopDuration() {
        return 150;
    }
}
'''
'''--- Zaros/daHillGiantKiller/daHillGiantKillerMain.java ---
package daHillGiantKiller;

import simple.hooks.filters.SimplePrayers;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleGroundItem;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;

import java.awt.*;
import java.util.Arrays;
import java.util.stream.Stream;

@ScriptManifest(
        author = "alex",
        category = Category.COMBAT,
        description = "<html>"
                + "<p></p>"
                + "<p><strong></strong></p>"
                + "<ul>"
                + "<li><strong></strong>.</li>"
                + "<li><strong></strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daHillGiantKiller",
        servers = {"Zaros"},
        version = "4.0"
)
public class daHillGiantKillerMain extends Script {
    final int[] EASY_CLUES = {2702, 2707, 2677, 2699, 2683, 2688, 2678, 2700, 2686, 2682, 2689, 2705, 2684, 2693, 2696, 2706, 2686, 2698};
    final int[] HARD_CLUES = {2786, 2737, 3520, 2792, 2799, 2733, 2776, 2780, 2735, 3538, 2790, 2731, 3524, 2782, 2797, 2741, 2729, 2783, 3532, 3530, 2723, 2739, 3540, 2722, 2796, 3542, 2774, 3525, 2773, 2793, 2775, 3522, 2747};
    final int[] ELITE_CLUES = {12105, 12091, 12086, 12076, 12083, 12073, 12097, 12089, 12079, 12088, 12105};
    final int[] RUNE_ITEMS = {1213, 830, 892, 1432, 811, 824, 44, 3101, 1319, 1163, 1359, 1275, 868, 1373, 1303, 1147, 1333, 19580, 1247, 9185, 4131, 1201, 1113, 1079};
    final int[] DRAGON_ITEMS = {20849};
    final int[] IMPORTANT_ITEMS = {20754, 10976, 22374, 10977, 4151, 2366, 4153, 4101};
    final int[] MISC = {2354};
    final int[] KARUULM_ITEMS = {19677, 19681, 19683, 19679};
    final int[] FoodIds = {391, 385, 379, 7946, 13441, 373, 3144, 11936};
    final int[] PPotsIds = {143, 3030, 141, 3028, 139, 3026, 2434, 3024};
    final int[] ITEM_IDs = Stream.of(EASY_CLUES, HARD_CLUES, ELITE_CLUES, IMPORTANT_ITEMS, RUNE_ITEMS, KARUULM_ITEMS, DRAGON_ITEMS, MISC)
            .flatMapToInt(Arrays::stream)
            .toArray();
    final int[] LE_NPC = {412};
    final int[] SUPPs_NPC = {7402, 7407, 7410, 10399, 1149, 1377, 7158, 11212, 4087, 1432, 1215, 3204, 21930, 11237, 19484, 19582};
    public String status;
    public long startTime;

    @Override
    public void onExecute() {
        System.out.println("Started daSlayerHelper");
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        SimplePrayers prayers = new SimplePrayers(ctx);
        SimpleGroundItem items = ctx.groundItems.populate().filter(ITEM_IDs).nextNearest();
        SimpleNpc Giant = ctx.npcs.populate().filter(LE_NPC).nextNearest();
        SimpleNpc SUPPs = ctx.npcs.populate().filter(SUPPs_NPC).nextNearest();
        SimpleItem food = ctx.inventory.populate().filter(FoodIds).next();
        SimpleItem ppots = ctx.inventory.populate().filter(PPotsIds).next();

        if (!ctx.groundItems.populate().filter(ITEM_IDs).isEmpty() && items != null) {
            status("Looting items");
            items.click("Take");
            ctx.sleepCondition(() -> !ctx.groundItems.populate().filter(ITEM_IDs).isEmpty(), 1000);
        }

        if (ctx.groundItems.populate().filter(ITEM_IDs).isEmpty()) {
            if (Giant != null && SUPPs == null) {
                if (ctx.getClient().getLocalPlayer().getInteracting() == null) {
                    Giant.click(0);
                    status("Attacking");
                }
            }
            if (SUPPs != null) {
                if (ctx.getClient().getLocalPlayer().getInteracting() == null) {
                    SUPPs.click(0);
                    status("Attacking Supp");
                }
            }
        }

        if (ctx.players.getLocal().getHealth() <= 30 && food != null) {
            food.click(0);
        }

        if (prayers.points() <= 30 && ppots != null) {
            ppots.click(0);
        }
    }

    @Override
    public void onChatMessage(ChatMessage chatMessage) {
    }

    @Override
    public void paint(Graphics graphics) {

    }

    @Override
    public void onTerminate() {
        ctx.log("ty fo usin me");
    }

    public void status(final String status) {
        this.status = status;
    }
}

'''
'''--- Zaros/daJad/daJadMain.java ---
package daJad;

import simple.hooks.filters.SimplePrayers;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.api.ClientContext;
import simple.robot.script.Script;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.List;

@ScriptManifest(author = "alex", category = Category.COMBAT, description = "<br>1<br><br>2<br><br>3<br>~ AIO4 ~<br>5<br>6<br>7<br><br>8", discord = "", name = "daJad", servers = {
        "Zaros, Battlescape" }, version = "0.1")

public class daJadMain extends Script {

    @Override
    public void onExecute() {
    }

    @Override
    public void onProcess() {
        SimpleNpc JAD = ctx.npcs.populate().filter(3127).nextNearest();
        int RANGE_ANIM = 2652;
        int MAGE_ANIM = 2656;
        if (JAD != null) {
            if (JAD.getAnimation() == RANGE_ANIM) {
                if (!ctx.prayers.prayerActive(SimplePrayers.Prayers.PROTECT_FROM_MISSILES)) {
                    ctx.prayers.prayer(SimplePrayers.Prayers.PROTECT_FROM_MISSILES, true);
                    ctx.log("prayin range");
                }//pray range
            } else if (JAD.getAnimation() == MAGE_ANIM) {
                if (!ctx.prayers.prayerActive(SimplePrayers.Prayers.PROTECT_FROM_MAGIC)) {
                    ctx.prayers.prayer(SimplePrayers.Prayers.PROTECT_FROM_MAGIC, true);
                    ctx.log("prayin mage");
                }//pray mage
            }
        }
    }

    @Override
    public void onChatMessage(ChatMessage msg) {
    }

    @Override
    public void onTerminate() {
    }

    @Override
    public void paint(Graphics Graphs) {

    }
}

'''
'''--- Zaros/daPaintTest/daPaintTestGui.java ---
package daPaintTest;

import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.util.Objects;

public class daPaintTestGui extends JFrame {
    private static final long serialVersionUID = 1L;
    private static final String[] LIST = {"item1", "item2", "item3", "item4"};
    public static JComboBox<String> potionsComboBox;
    private JTextField itemTextField;
    private JButton startButton;
    private JButton pauseButton;

    public daPaintTestGui() {
        setTitle("Paint Test");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        initGUI();

        pack();
    }

    private void initGUI() {
        JPanel contentPane = new JPanel(new GridBagLayout());
        contentPane.setBackground(Color.DARK_GRAY);
        setContentPane(contentPane);

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.insets = new Insets(5, 5, 5, 5);

        // Add title
        constraints.gridy = 0;
        constraints.gridx = 0;
        constraints.gridwidth = 2;
        constraints.anchor = GridBagConstraints.CENTER;
        addLabel("Please choose options below!", contentPane, constraints, true);

        constraints.gridwidth = 1; // Resetting gridwidth
        constraints.anchor = GridBagConstraints.WEST; // Resetting anchor

        constraints.gridy++; // Moving to next row
        constraints.gridx = 0; // Resetting x-axis position to 0

        // Select location
        addLabel("Select potions: ", contentPane, constraints, false);
        constraints.gridx = 1; // Setting x-axis position to 1
        potionsComboBox = addComboBox(contentPane, constraints);
        potionsComboBox.setPreferredSize(new Dimension(150, potionsComboBox.getPreferredSize().height));

        constraints.gridx = 0; // Resetting x-axis position to 0
        constraints.gridy++; // Moving to next row

        constraints.gridx = 0; // Resetting x-axis position to 0
        constraints.gridy++; // Moving to next row
        constraints.gridwidth = 2; // Resetting gridwidth
        constraints.anchor = GridBagConstraints.CENTER; // Resetting anchor

        // Start and Pause buttons
        JPanel buttonsPanel = new JPanel(new GridLayout(1, 2, 5, 0));
        startButton = new JButton("Start");
        startButton.addActionListener(e -> startBot());
        startButton.setBackground(Color.GREEN);
        buttonsPanel.add(startButton);
        pauseButton = new JButton("Pause");
        pauseButton.addActionListener(e -> pauseBot());
        pauseButton.setVisible(false); // Setting button invisible
        pauseButton.setBackground(Color.RED);
        buttonsPanel.add(pauseButton);
        contentPane.add(buttonsPanel, constraints);
    }

    private void addLabel(String text, Container container, GridBagConstraints constraints, boolean isTitle) {
        JLabel label = new JLabel(text);
        label.setForeground(Color.WHITE);
        if (isTitle) {
            label.setFont(label.getFont().deriveFont(Font.BOLD, 16));
        }
        container.add(label, constraints);
        constraints.gridx++;
    }

    private JComboBox<String> addComboBox(Container container, GridBagConstraints constraints) {
        JComboBox<String> comboBox = new JComboBox<>(LIST);
        container.add(comboBox, constraints);
        constraints.gridx = 0;
        constraints.gridy++;
        return comboBox;
    }

    private void startBot() {
        daPaintTestMain.botStarted = true;
        pauseButton.setVisible(true);
        startButton.setVisible(false);
        potionsComboBox.setEnabled(false);
    }

    private void pauseBot() {
        daPaintTestMain.botStarted = false;
        pauseButton.setVisible(false);
        startButton.setVisible(true);
        potionsComboBox.setEnabled(true);
    }
}

'''
'''--- Zaros/daPaintTest/daPaintTestMain.java ---
package daPaintTest;

import simple.hooks.filters.SimplePrayers;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleGroundItem;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;

import java.awt.*;
import java.util.Arrays;
import java.util.stream.Stream;

@ScriptManifest(
        author = "alex",
        category = Category.UTILITY,
        description = "<html>"
                + "<p></p>"
                + "<p><strong></strong></p>"
                + "<ul>"
                + "<li><strong></strong>.</li>"
                + "<li><strong></strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daHillGr",
        servers = {"Zaros"},
        version = "4.0"
)

public class daPaintTestMain extends Script {
    final int[] EASY_CLUES = {2702, 2707, 2677, 2699, 2683, 2688, 2678, 2700, 2686, 2682, 2689, 2705, 2684, 2693, 2696, 2706, 2686, 2698};
    final int[] HARD_CLUES = {2786, 2737, 3520, 2792, 2799, 2733, 2776, 2780, 2735, 3538, 2790, 2731, 3524, 2782, 2797, 2741, 2729, 2783, 3532, 3530, 2723, 2739, 3540, 2722, 2796, 3542, 2774, 3525};
    final int[] ELITE_CLUES = {12105, 12091, 12086, 12076, 12083, 12073, 12097, 12089, 12079, 12088, 12105};
    final int[] RUNE_ITEMS = {1213, 830, 892, 1432, 811, 824, 44, 3101, 1319, 1163, 1359, 1275, 868, 1373, 1303, 1147, 1333, 19580, 1247, 9185, 4131, 1201, 1113};
    final int[] IMPORTANT_ITEMS = {20754, 10976, 22374, 10977, 995};
    final int[] KARUULM_ITEMS = {19677, 19681, 19683, 19679};
    final int[] FoodIds = {391, 385, 379, 7946, 13441, 373, 3144, 11936};
    final int[] PPotsIds = {143, 3030, 141, 3028, 139, 3026, 2434, 3024};
    final int[] ITEM_IDs = Stream.of(EASY_CLUES, HARD_CLUES, ELITE_CLUES, IMPORTANT_ITEMS, RUNE_ITEMS, KARUULM_ITEMS)
            .flatMapToInt(Arrays::stream)
            .toArray();
    final int[] LE_NPC = {2093, 2090, 2098, 8, 955, 7245, 7246, 7244};
    public String status;
    public long startTime;
    public int times_killed;
    public static boolean botStarted = true;
    // Gui
    private static daPaintTestGui gui;
    private void initializeGUI() {
        gui = new daPaintTestGui();
        gui.setVisible(true);
        gui.setLocale(ctx.getClient().getCanvas().getLocale());
    }
    @Override
    public void onExecute() {
        System.out.println("Started daSlayerHelper");
        this.startTime = System.currentTimeMillis();
        initializeGUI();
    }

    @Override
    public void onTerminate() {
        if (gui != null) {
            //gui.onCloseGUI();
            gui.dispose();
        }

    }

    @Override
    public void onProcess() {
        SimplePrayers prayers = new SimplePrayers(ctx);
        SimpleGroundItem items = ctx.groundItems.populate().filter(ITEM_IDs).nextNearest();
        SimpleNpc Giant = ctx.npcs.populate().filter(LE_NPC).nextNearest();
        SimpleItem food = ctx.inventory.populate().filter(FoodIds).next();
        SimpleItem ppots = ctx.inventory.populate().filter(PPotsIds).next();
        if (!ctx.groundItems.populate().filter(ITEM_IDs).isEmpty()) {
            status("Looting items");
            items.click("Take");
            ctx.sleepCondition(() -> !ctx.groundItems.populate().filter(ITEM_IDs).isEmpty(), 1000);
        }

        if (Giant != null && ctx.groundItems.populate().filter(ITEM_IDs).isEmpty()) {
            if (ctx.getClient().getLocalPlayer().getInteracting() == null) {
                Giant.click(0);
                status("Attacking");
            }
        }

        if (ctx.players.getLocal().getHealth() <= 30 && food != null) {
            food.click(0);
        }

        if (prayers.points() <= 30 && ppots != null) {
            ppots.click(0);
        }
    }

    @Override
    public void onChatMessage(ChatMessage chatMessage) {

    }

    @Override
    public void paint(Graphics graphics) {

    }

    public void status(final String status) {
        this.status = status;
    }
}

'''
'''--- Zaros/daZobbers/daZobberMain.java ---
package daZobbers;

import simple.hooks.filters.SimpleSkills;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.LoopingScript;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleNpc;
import simple.hooks.wrappers.SimpleObject;
import simple.hooks.wrappers.SimpleWidget;
import simple.robot.script.Script;

import java.awt.*;

@ScriptManifest(
        author = "alex",
        category = Category.THIEVING,
        description = "<html>"
                + "<p>Dumb master farmer thief for Zaros</p>"
                + "<p><strong>Performs pickpockets</strong></p>"
                + "<ul>"
                + "<li><strong>Start @ the master farmer at Farming Guild</strong>.</li>"
                + "<li><strong>Drops the useless shit and keeps the good shit</strong></li>"
                + "</ul>"
                + "</html>",
        discord = "",
        name = "daZobber",
        servers = {"Zaros"},
        version = "4.0"
)

public class daZobberMain extends Script implements LoopingScript {
    public String status;
    public long startTime;
    public int startExperience, times_stole;
    private static final int DA_VICTIM_ID = 5730;
    public int[] itemIds = {1,2};
    private static boolean hidePaint = false;

    @Override
    public void onExecute() {
        System.out.println("Started daZobber");
        this.startExperience = ctx.skills.experience(SimpleSkills.Skills.THIEVING);
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        SimpleWidget seedVWidget = ctx.widgets.getWidget(631, 3);
        SimpleWidget depositInvButton = ctx.widgets.getWidget(631, 25);
        SimpleObject seedVObject = ctx.objects.populate().filter("Seed vault").nearest().next();
        SimpleNpc pickpocket_ore = ctx.npcs.populate().filter(DA_VICTIM_ID).nearest().next();

        if (pickpocket_ore != null && !ctx.inventory.inventoryFull()) {
            pickpocket_ore.click(0);
            status("Zobbing");
        }

        if (ctx.inventory.inventoryFull() && seedVObject != null) {
            seedVObject.click(0);
            if (!seedVWidget.isHidden() && seedVWidget != null) {
                status("Banking 1");
                ctx.sleepCondition(() -> seedVWidget.isHidden(), 2500);
                if (!depositInvButton.isHidden() && depositInvButton != null) {
                    depositInvButton.click(0);
                    ctx.sleepCondition(() -> !ctx.inventory.inventoryFull(), 2500);
                }
            }
        }

        if (seedVWidget != null) {
            if (!seedVWidget.isHidden() && !ctx.inventory.inventoryFull()) {
                ctx.pathing.step(pickpocket_ore.getLocation());
            }
        }
    }

    /*
    private void clickPreset() {
        status("preset moment");
        SimpleWidget preset = ctx.widgets.getWidget(702, 38);
        SimpleWidget questTab = ctx.widgets.getWidget(548, 50);
        SimpleWidget loadOuts = ctx.widgets.getWidget(702, 5);
        if (questTab != null && !questTab.isHidden()) {
            questTab.click(0);
            if (loadOuts != null && !loadOuts.isHidden()) {
                loadOuts.click(0);
                if (preset != null && !preset.isHidden()) {
                    preset.click(0);
                }
            }
        }
    }
    if invFull && seedObj!=null {
    clilc.obj
    if !widget.isHidden && !null

    }

     */

    @Override
    public void onChatMessage(ChatMessage m) {
        if (m.getMessage() != null) {
            String message = m.getMessage().toLowerCase();
            if (message.contains("ou pick the")) {
                times_stole++;
            }
        }
    }

    @Override
    public void onTerminate() {
        System.out.println("You stole this many times:");
        System.out.println(times_stole);
    }

    public void status(final String status) {
        this.status = status;
    }

    public void paint(Graphics g1) {
        // Check if mouse is hovering over the paint
        Point mousePos = ctx.mouse.getPoint();
        if (mousePos != null) {
            Rectangle paintRect = new Rectangle(368, 260, 150, 75);
            hidePaint = paintRect.contains(mousePos.getLocation());
        }

        Graphics2D g = (Graphics2D) g1;

        if (!hidePaint) {
            g.setColor(Color.DARK_GRAY);
            g.fillRect(368, 260, 150, 75);
            g.setColor(Color.BLACK);
            g.drawRect(368, 260, 150, 75);

            Font font1 = new Font("Karla", Font.BOLD, 10); // Adjust the font family, style, and size as desired
            g.setFont(font1);
            g.setColor(Color.GRAY);
            g.drawString("Time: " + ctx.paint.formatTime(System.currentTimeMillis() - startTime), 380, 286);
            g.drawString("Status: " + status, 380, 298);
            int totalExp = ctx.skills.experience(SimpleSkills.Skills.THIEVING) - startExperience;
            g.drawString("XP: " + ctx.paint.formatValue(totalExp) + " (" + ctx.paint.valuePerHour(totalExp / 1000, startTime) + "k)", 380, 308);
            g.drawString("Pickpockets: " + ctx.paint.formatValue(times_stole) + " (" + ctx.paint.valuePerHour(times_stole, startTime) + ")", 380, 320);
            Font font2 = new Font("Karla", Font.BOLD, 12); // Adjust the font family, style, and size as desired
            g.setFont(font2);
            g.setColor(Color.WHITE);
            g.drawString("daZobber  v. " + "4.0", 380, 274);
        }
    }

    @Override
    public int loopDuration() {
        return 300;
    }
}
'''